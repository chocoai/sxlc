<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">     
<mapper namespace="EnterpriseCAXML">  
	<!-- 会员认证类型 -->
    <resultMap type="cn.membermng.model.MemberAttestTypeEntity" id="MemberAttestType">
        <id column="Attest_Type_ID" property="attestTypeID" />
		<result column="Attest_TypeName" property="attestTypeName" />
    </resultMap>  
    <!-- 分页查询企业或者个人会员所有需要后台审核的认证类型 -->
    <select id="selectAllMemberAttestType" resultMap="MemberAttestType" parameterType="product_p2p.kit.pageselect.PageEntity">
    	select Attest_Type_ID,Attest_TypeName from Member_Attest_Type 
    	where Need_Check=1 and Member_Type=#{map.memberType}
    </select>
    
    <resultMap type="cn.membermng.model.MemberAttestByTypeEntity" id="MemberAttestByType">
    	<result column="Member_No" property="memberNo"/>
    	<result column="Member_ID" property="memberID"/>
    	<result column="Logname" property="logname"/>
    	<result column="Certification_ID" property="certificationID"/>
    	<result column="Record_Date" property="recordDate"/>
    	<result column="Status" property="status"/>
    	<result column="Attest_Type_ID" property="attestTypeID"/>
    	<result column="Attest_TypeName" property="attestTypeName"/>
    	<result column="realName" property="realName"/>
    	<result column="End_Date" property="validTime"/>
    	<result column="statuname" property="statuname"/>
    </resultMap>
    <!-- 根据认证类型id,会员类型分页查询当前认证所有会员信息 -->
    <select id="selectMemberAttestByType" resultMap="MemberAttestByType" parameterType="product_p2p.kit.pageselect.PageEntity" >
    	select mi.Member_No,mi.Member_ID,mi.Logname,mai.Certification_ID,mai.Record_Date,mai.Status,mai.Attest_Type_ID,mat.Attest_TypeName,(SELECT name1 from DICT where tcode='DICT_HYRZZT' and code1=mai.Status LIMIT 1) AS statuname, 
   		  CONVERT((AES_DECRYPT(UNHEX(pbi.Personal_Name),#{map.skey})) using utf8) as realName,mai.End_Date
			from Member_Attest_Info mai 
			left join Member_Info mi ON mi.Member_ID=mai.Member_ID
			LEFT JOIN Member_Attest_Type mat ON mat.Attest_Type_ID=mai.Attest_Type_ID
			left join Personal_Base_Info pbi on pbi.Personal_Id = mi.Personal_Id
			<where>
				mi.Member_Type=#{map.memberType} 
				and mai.Status=#{map.status}
				<if test="map.attestTypeID &gt; 25">
					and mat.Attest_Type_ID> #{map.attestTypeID}
				</if>
				<if test="map.attestTypeID &lt; 26">
					and mat.Attest_Type_ID= #{map.attestTypeID}
				</if>
				<if test="map.logname!=null and map.logname!=''">
					and mi.Logname like '%${map.logname}%'
				</if>
				<if test="map.realName!=null and map.realName!='' ">
					and CONVERT((AES_DECRYPT(UNHEX(pbi.Personal_Name),#{map.skey})) using utf8) like '%${map.realName}%'
				</if>
			</where>  
    </select>
    <!-- 会员实名认证列表信息展示 -->
    <select id="realNameAuthentication" parameterType="product_p2p.kit.pageselect.PageEntity" resultType="cn.membermng.model.MemberAttestByTypeEntity">
    	select mi.Member_No memberNo,mi.Member_ID memberID,mi.Logname logname,mai.Certification_ID certificationID
    	,mai.Record_Date recordDate,mai.Status status,mai.Attest_Type_ID attestTypeID,mat.Attest_TypeName attestTypeName,(SELECT name1 from DICT where tcode='DICT_HYRZZT' and code1=mai.Status LIMIT 1) AS statuname,
   		 CONVERT((AES_DECRYPT(UNHEX(prc.Personal_IDCard),#{map.skey})) using utf8) as personalIDCard, 
   		  CONVERT((AES_DECRYPT(UNHEX(prc.Real_Name),#{map.skey})) using utf8) as realName,ni.NationName as nationName,
    		prc.SexID sexId,CONVERT((AES_DECRYPT(UNHEX(prc.Home_Town),#{map.skey})) using utf8) as homeTown,mai.End_Date validTime
			from Member_Attest_Info mai 
			left join Member_Info mi ON mi.Member_ID=mai.Member_ID
			LEFT JOIN Member_Attest_Type mat ON mat.Attest_Type_ID=mai.Attest_Type_ID
			left join Personal_RealName_Check prc on prc.Certification_ID=mai.Certification_ID
			LEFT JOIN Nation_Info ni on ni.Nation_Id = prc.Nation
			<where>
				mi.Member_Type=#{map.memberType} and mat.Attest_Type_ID=#{map.attestTypeID}
				and mai.Status=#{map.status}
				<if test="map.logname!=null and map.logname!=''">
					and mi.Logname like '%${map.logname}%'
				</if>
				<if test="map.realName!=null and map.realName!='' ">
					and CONVERT((AES_DECRYPT(UNHEX(prc.Real_Name),#{map.skey})) using utf8) like '%${map.realName}%'
				</if>
				<if test="map.idcard and map.idcard !=''">
					and CONVERT((AES_DECRYPT(UNHEX(prc.Personal_IDCard),#{map.skey})) using utf8) like '%${map.idcard}%'
				</if>
			</where> 

    </select>
    
    
    <!-- 根据认证类型id,会员类型分页查询住址认证信息 -->
    <select id="AddressAuthentication" resultType="cn.membermng.model.MemberAttestByTypeEntity" parameterType="product_p2p.kit.pageselect.PageEntity" >
    	select mi.Member_No memberNo,mi.Member_ID memberID,mi.Logname logname,mai.Certification_ID certificationID
    	,mai.Record_Date recordDate,mai.Status,mai.Attest_Type_ID,mat.Attest_TypeName attestTypeName,(SELECT name1 from DICT where tcode='DICT_HYRZZT' and code1=mai.Status LIMIT 1) AS statuname, 
			CONVERT((AES_DECRYPT(UNHEX(pbi.Personal_Name),#{map.skey})) using utf8) as realName,mac.Address address,mai.End_Date validTime
			from Member_Attest_Info mai 
			left join Member_Info mi ON mi.Member_ID=mai.Member_ID
			LEFT JOIN Member_Attest_Type mat ON mat.Attest_Type_ID=mai.Attest_Type_ID
			left join Personal_Base_Info pbi on pbi.Personal_Id = mi.Personal_Id
			left join Member_Address_Check mac on mac.Certification_ID = mai.Certification_ID
			<where>
				mi.Member_Type=#{map.memberType} and mat.Attest_Type_ID=#{map.attestTypeID}
				and mai.Status=#{map.status}
				<if test="map.logname!=null and map.logname!=''">
					and mi.Logname like '%${map.logname}%'
				</if>
				<if test="map.realName!=null and map.realName!='' ">
					and CONVERT((AES_DECRYPT(UNHEX(pbi.Personal_Name),#{map.skey})) using utf8) like '%${map.realName}%'
				</if>
			</where>  
    </select>
    
    
    <!-- 根据认证类型id,会员类型分页查询房产认证信息 -->
    <select id="HouseCentification" resultType="cn.membermng.model.MemberAttestByTypeEntity" parameterType="product_p2p.kit.pageselect.PageEntity" >
    	select mi.Member_No memberNo,mi.Member_ID memberID,mi.Logname logname,mai.Certification_ID certificationID
    	,mai.Record_Date recordDate,mai.Status,mai.Attest_Type_ID,mat.Attest_TypeName attestTypeName,(SELECT name1 from DICT where tcode='DICT_HYRZZT' and code1=mai.Status LIMIT 1) AS statuname, 
			CONVERT((AES_DECRYPT(UNHEX(pbi.Personal_Name),#{map.skey})) using utf8) as realName,
			ela.Address houseAddress,ela.Area area,ela.Value value,mai.End_Date validTime
			from Member_Attest_Info mai 
			left join Member_Info mi ON mi.Member_ID=mai.Member_ID
			LEFT JOIN Member_Attest_Type mat ON mat.Attest_Type_ID=mai.Attest_Type_ID
			left join Personal_Base_Info pbi on pbi.Personal_Id = mi.Personal_Id
			LEFT JOIN Member_Estate_Check ela ON ela.Certification_ID=mai.Certification_ID

			<where>
				mi.Member_Type=#{map.memberType} and mat.Attest_Type_ID=#{map.attestTypeID}
				and mai.Status=#{map.status}
				<if test="map.logname!=null and map.logname!=''">
					and mi.Logname like '%${map.logname}%'
				</if>
				<if test="map.realName!=null and map.realName!='' ">
					and CONVERT((AES_DECRYPT(UNHEX(pbi.Personal_Name),#{map.skey})) using utf8) like '%${map.realName}%'
				</if>
			</where>  
    </select>
    
        <!-- 根据认证类型id,会员类型分页查询车产信息 -->
    <select id="CarCentification" resultType="cn.membermng.model.MemberAttestByTypeEntity" parameterType="product_p2p.kit.pageselect.PageEntity" >
    	select mi.Member_No memberNo,mi.Member_ID memberID,mi.Logname logname,mai.Certification_ID certificationID
    	,mai.Record_Date recordDate,mai.Status,mai.Attest_Type_ID,mat.Attest_TypeName attestTypeName,(SELECT name1 from DICT where tcode='DICT_HYRZZT' and code1=mai.Status LIMIT 1) AS statuname, 
			CONVERT((AES_DECRYPT(UNHEX(pbi.Personal_Name),#{map.skey})) using utf8) as realName,
			ela.Brand brand,ela.Model model,ela.License_Plate licensePlate,
			ela.Value value,mai.End_Date validTime
			from Member_Attest_Info mai 
			left join Member_Info mi ON mi.Member_ID=mai.Member_ID
			LEFT JOIN Member_Attest_Type mat ON mat.Attest_Type_ID=mai.Attest_Type_ID
			left join Personal_Base_Info pbi on pbi.Personal_Id = mi.Personal_Id
			LEFT JOIN Member_Car_Check ela ON ela.Certification_ID=mai.Certification_ID
			<where>
				mi.Member_Type=#{map.memberType} and mat.Attest_Type_ID=#{map.attestTypeID}
				and mai.Status=#{map.status}
				<if test="map.logname!=null and map.logname!=''">
					and mi.Logname like '%${map.logname}%'
				</if>
				<if test="map.realName!=null and map.realName!='' ">
					and CONVERT((AES_DECRYPT(UNHEX(pbi.Personal_Name),#{map.skey})) using utf8) like '%${map.realName}%'
				</if>
			</where>  
    </select>
    
     <!-- 根据认证类型id,会员类型分页查询婚姻认证所有会员信息 -->
    <select id="marriageCertification" resultType="cn.membermng.model.MemberAttestByTypeEntity" parameterType="product_p2p.kit.pageselect.PageEntity" >
    	select mi.Member_No memberNo,mi.Member_ID memberID,mi.Logname logname,mai.Certification_ID certificationID
    	,mai.Record_Date recordDate,mai.Status,mai.Attest_Type_ID,mat.Attest_TypeName attestTypeName,(SELECT name1 from DICT where tcode='DICT_HYRZZT' and code1=mai.Status LIMIT 1) AS statuname,
			CONVERT((AES_DECRYPT(UNHEX(pbi.Personal_Name),#{map.skey})) using utf8) as realName,minf.MaritalName maritalName,mai.End_Date validTime
			from Member_Attest_Info mai 
			left join Member_Info mi ON mi.Member_ID=mai.Member_ID
			LEFT JOIN Member_Attest_Type mat ON mat.Attest_Type_ID=mai.Attest_Type_ID
			left join Personal_Base_Info pbi on pbi.Personal_Id = mi.Personal_Id
			left JOIN Member_Marriage_Check mmc on mmc.Certification_ID = mai.Certification_ID
			left join Marital_Info minf on minf.Marital_ID= mmc.Is_Married 
			<where>
				mi.Member_Type=#{map.memberType} and mat.Attest_Type_ID=#{map.attestTypeID}
				and mai.Status=#{map.status}
				<if test="map.logname!=null and map.logname!=''">
					and mi.Logname like '%${map.logname}%'
				</if>
				<if test="map.realName!=null and map.realName!='' ">
					and CONVERT((AES_DECRYPT(UNHEX(pbi.Personal_Name),#{map.skey})) using utf8) like '%${map.realName}%'
				</if>
			</where>  
    </select>
    
    
    
     <!-- 根据认证类型id,会员类型分页查询学历认证所有会员信息 -->
    <select id="EducationCertification" resultType="cn.membermng.model.MemberAttestByTypeEntity" parameterType="product_p2p.kit.pageselect.PageEntity" >
    	select mi.Member_No memberNo,mi.Member_ID memberID,mi.Logname logname,mai.Certification_ID certificationID
    	,mai.Record_Date recordDate,mai.Attest_Type_ID,mat.Attest_TypeName attestTypeName,(SELECT name1 from DICT where tcode='DICT_HYRZZT' and code1=mai.Status LIMIT 1) AS statuname,
			CONVERT((AES_DECRYPT(UNHEX(pbi.Personal_Name),#{map.skey})) using utf8) as realName,ei.EducationName educationName,mai.End_Date validTime
			from Member_Attest_Info mai 
			left join Member_Info mi ON mi.Member_ID=mai.Member_ID
			LEFT JOIN Member_Attest_Type mat ON mat.Attest_Type_ID=mai.Attest_Type_ID
			left join Personal_Base_Info pbi on pbi.Personal_Id = mi.Personal_Id
			left JOIN Member_Education_Check mec on mec.Certification_ID = mai.Certification_ID
			left join Education_Info ei on mec.Education = ei.Education_ID
			<where>
				mi.Member_Type=#{map.memberType} and mat.Attest_Type_ID=#{map.attestTypeID}
				and mai.Status=#{map.status}
				<if test="map.logname!=null and map.logname!=''">
					and mi.Logname like '%${map.logname}%'
				</if>
				<if test="map.realName!=null and map.realName!='' ">
					and CONVERT((AES_DECRYPT(UNHEX(pbi.Personal_Name),#{map.skey})) using utf8) like '%${map.realName}%'
				</if>
			</where>  
    </select>
    
    
    <!-- 认证附件信息 -->
    <resultMap type="cn.membermng.model.PersonalAttestAttachEntity" id="sPersonalAttestAttach">
    	<result column="Attest_ID" property="attestID"/>
    	<result column="Attach_Name" property="attachName"/>
    	<result column="Attach_Type" property="attachType"/>
    	<result column="Upload_time" property="uploadtime"/>
    	<result column="Attach_Path" property="attachPath"/>
    	<result column="Statuname" property="attachTypeName"/>
    </resultMap>
    <!-- 根据认证记录id查看会员该认证项的认证附件信息 -->
    <select id="selectAttestAttachList" parameterType="Map" resultMap="sPersonalAttestAttach">
    	select Attest_ID,Attach_Name,Attach_Type,Upload_time,Attach_Path,
    	(SELECT name1 from DICT where tcode='DICT_FJLX' and code1=Attach_Type LIMIT 1) AS Statuname
    	 from Personal_Attest_Attach where Attest_ID=#{attestID}
    </select>
    
    
    
      <!-- 企业公共认证列表查询 -->
    <select id="EnterpriseCommonCertification" resultType="cn.membermng.model.EnterpriseLicenseAttestEntity" parameterType="product_p2p.kit.pageselect.PageEntity">
    select mi.Member_No memberNo,mi.Member_ID memberID,mi.Logname logname,mai.Certification_ID certificationID,
    mai.Record_Date recordDate,mai.Status status,mai.Attest_Type_ID attestTypeID,mai.End_Date endDate,
	mat.Attest_TypeName attestTypeName,(SELECT name1 from DICT where tcode='DICT_HYRZZT' and code1=mai.Status LIMIT 1) AS statuname,
	CONVERT((AES_DECRYPT(UNHEX(ci.Compang_Name),#{map.skey})) using utf8) company
	from Member_Attest_Info mai 
	left join Member_Info mi ON mi.Member_ID=mai.Member_ID
	left join Company_Info ci on ci.Company_ID = mi.Company_ID
	LEFT JOIN Member_Attest_Type mat ON mat.Attest_Type_ID=mai.Attest_Type_ID
	<where>
	    mi.Member_Type=1 and mat.Attest_Type_ID=#{map.attestTypeID}
		and mai.Status=#{map.status}
		<if test="map.attestTypeID  &gt;  25">
			and mi.Logname like '%${map.logname}%'
		</if>
		<if test="map.attestTypeID &lt; 26">
			and mi.Logname like '%${map.logname}%'
		</if>
		<if test="map.logname!=null and map.logname!=''">
			and mi.Logname like '%${map.logname}%'
		</if>
		<if test="map.companyName!=null and map.companyName!='' ">
			and CONVERT((AES_DECRYPT(UNHEX(ci.Compang_Name),#{map.skey})) using utf8) like '%${map.companyName}%'
		</if>
	</where>  
    </select>
    
    
    
    
    <!-- 企业营业执照认证列表查询 -->
    <select id="EnterpriseBLCertification" resultType="cn.membermng.model.EnterpriseLicenseAttestEntity" parameterType="product_p2p.kit.pageselect.PageEntity">
    select mi.Member_No memberNo,mi.Member_ID memberID,mi.Logname logname,mai.Certification_ID certificationID,
    mai.Record_Date recordDate,mai.Status status,mai.Attest_Type_ID attestTypeID,mai.End_Date endDate,
	mat.Attest_TypeName attestTypeName,(SELECT name1 from DICT where tcode='DICT_HYRZZT' and code1=mai.Status LIMIT 1) AS statuname,
	ela.Reg_Capital regCapital, ela.Firm_Type firmType,ela.Reg_Date regDate,
	CONVERT((AES_DECRYPT(UNHEX(ela.Firm_BLN),#{map.skey})) using utf8) firmBLN,
	CONVERT((AES_DECRYPT(UNHEX(ela.Firm_Address),#{map.skey})) using utf8) firmAddress,
	CONVERT((AES_DECRYPT(UNHEX(ela.Firm_Legal),#{map.skey})) using utf8) firmLegal,
	CONVERT((AES_DECRYPT(UNHEX(ela.Reg_Business),#{map.skey})) using utf8) regBusiness,
	CONVERT((AES_DECRYPT(UNHEX(ci.Compang_Name),#{map.skey})) using utf8) company
	from Member_Attest_Info mai 
	left join Member_Info mi ON mi.Member_ID=mai.Member_ID
	left join Company_Info ci on ci.Company_ID = mi.Company_ID
	LEFT JOIN Member_Attest_Type mat ON mat.Attest_Type_ID=mai.Attest_Type_ID
	LEFT JOIN Enterprise_License_Attest ela ON ela.Certification_ID=mai.Certification_ID
	<where>
	    mi.Member_Type=1 and mat.Attest_Type_ID=#{map.attestTypeID}
		and mai.Status=#{map.status}
		<if test="map.logname!=null and map.logname!=''">
			and mi.Logname like '%${map.logname}%'
		</if>
		<if test="map.companyName!=null and map.companyName!='' ">
			and CONVERT((AES_DECRYPT(UNHEX(ci.Compang_Name),#{map.skey})) using utf8) like '%${map.companyName}%'
		</if>
	</where>  
    </select>
    
    
    <!-- 企业工商执照认证列表查询 -->
    <select id="EnterprisebusinessLC" resultType="cn.membermng.model.EnterpriseLicenseAttestEntity" parameterType="product_p2p.kit.pageselect.PageEntity">
    select mi.Member_No memberNo,mi.Member_ID memberID,mi.Logname logname,mai.Certification_ID certificationID,
    mai.Record_Date recordDate,mai.Status status,mai.Attest_Type_ID attestTypeID,mai.End_Date endDate,
	mat.Attest_TypeName attestTypeName,(SELECT name1 from DICT where tcode='DICT_HYRZZT' and code1=mai.Status LIMIT 1) AS statuname,
	ela.SetUp_Date setUpDate,
	CONVERT((AES_DECRYPT(UNHEX(ela.Firm_Legal),#{map.skey})) using utf8) firmLegal
	,ela.Reg_Capital regCapital,
	CONVERT((AES_DECRYPT(UNHEX(ela.Reg_Business),#{map.skey})) using utf8) regBusiness,
	ela.Firm_Type firmType,ela.Residence residence
	,CONVERT((AES_DECRYPT(UNHEX(ci.Compang_Name),#{map.skey})) using utf8) company
	from Member_Attest_Info mai 
	left join Member_Info mi ON mi.Member_ID=mai.Member_ID
	left join Company_Info ci on ci.Company_ID = mi.Company_ID
	LEFT JOIN Member_Attest_Type mat ON mat.Attest_Type_ID=mai.Attest_Type_ID
	LEFT JOIN Enterprise_BsnLicense_Attest ela ON ela.Certification_ID=mai.Certification_ID
	<where>
	    mi.Member_Type=1 and mat.Attest_Type_ID=#{map.attestTypeID}
		and mai.Status=#{map.status}
		<if test="map.logname!=null and map.logname!=''">
			and mi.Logname like '%${map.logname}%'
		</if>
		<if test="map.companyName!=null and map.companyName!='' ">
			and CONVERT((AES_DECRYPT(UNHEX(ci.Compang_Name),#{map.skey})) using utf8) like '%${map.companyName}%'
		</if>
	</where>  
    </select>
    
    
    
      <!-- 企业税务登记认证列表查询 -->
    <select id="EnterprisebusinessSW" resultType="cn.membermng.model.EnterpriseLicenseAttestEntity" parameterType="product_p2p.kit.pageselect.PageEntity">
    select mi.Member_No memberNo,mi.Member_ID memberID,mi.Logname logname,mai.Certification_ID certificationID,
    mai.Record_Date recordDate,mai.Status status,mai.Attest_Type_ID attestTypeID,mai.End_Date endDate,
	mat.Attest_TypeName attestTypeName,(SELECT name1 from DICT where tcode='DICT_HYRZZT' and code1=mai.Status LIMIT 1) AS statuname,
	CONVERT((AES_DECRYPT(UNHEX(ela.Credentials_NO),#{map.skey})) using utf8) credentialsNO,
			ela.Issue_Organ issueOrgan
	
	,CONVERT((AES_DECRYPT(UNHEX(ci.Compang_Name),#{map.skey})) using utf8) company
	from Member_Attest_Info mai 
	left join Member_Info mi ON mi.Member_ID=mai.Member_ID
	left join Company_Info ci on ci.Company_ID = mi.Company_ID
	LEFT JOIN Member_Attest_Type mat ON mat.Attest_Type_ID=mai.Attest_Type_ID
	LEFT JOIN Enterprise_Taxation_Attest ela ON ela.Certification_ID=mai.Certification_ID
	<where>
	    mi.Member_Type=1 and mat.Attest_Type_ID=#{map.attestTypeID}
		and mai.Status=#{map.status}
		<if test="map.logname!=null and map.logname!=''">
			and mi.Logname like '%${map.logname}%'
		</if>
		<if test="map.companyName!=null and map.companyName!='' ">
			and CONVERT((AES_DECRYPT(UNHEX(ci.Compang_Name),#{map.skey})) using utf8) like '%${map.companyName}%'
		</if>
	</where>  
    </select>
    
    
    
    
    
    <!-- 企业组织机构代码认证列表查询 -->
    <select id="EnterpriseOrganizationCode" resultType="cn.membermng.model.EnterpriseLicenseAttestEntity" parameterType="product_p2p.kit.pageselect.PageEntity">
    select mi.Member_No memberNo,mi.Member_ID memberID,mi.Logname logname,mai.Certification_ID certificationID,
    mai.Record_Date recordDate,mai.Status status,mai.Attest_Type_ID attestTypeID,mai.End_Date endDate,
	mat.Attest_TypeName attestTypeName,(SELECT name1 from DICT where tcode='DICT_HYRZZT' and code1=mai.Status LIMIT 1) AS statuname,
	CONVERT((AES_DECRYPT(UNHEX(ci.Compang_Name),#{map.skey})) using utf8) company
	,CONVERT((AES_DECRYPT(UNHEX(ela.Firm_OC),#{map.skey})) using utf8) firmOC
	,ela.Reg_Date regDate
	from Member_Attest_Info mai 
	left join Member_Info mi ON mi.Member_ID=mai.Member_ID
	left join Company_Info ci on ci.Company_ID = mi.Company_ID
	LEFT JOIN Member_Attest_Type mat ON mat.Attest_Type_ID=mai.Attest_Type_ID
	LEFT JOIN Enterprise_OrgCode_Attest ela ON ela.Certification_ID=mai.Certification_ID
	<where>
	    mi.Member_Type=1 and mat.Attest_Type_ID=#{map.attestTypeID}
		and mai.Status=#{map.status}
		<if test="map.logname!=null and map.logname!=''">
			and mi.Logname like '%${map.logname}%'
		</if>
		<if test="map.companyName!=null and map.companyName!='' ">
			and CONVERT((AES_DECRYPT(UNHEX(ci.Compang_Name),#{map.skey})) using utf8) like '%${map.companyName}%'
		</if>
	</where>  
    </select>
    
    
    <!-- 企业开户许可证认证列表查询 -->
    <select id="accountLicenseCode" resultType="cn.membermng.model.EnterpriseLicenseAttestEntity" parameterType="product_p2p.kit.pageselect.PageEntity">
    select mi.Member_No memberNo,mi.Member_ID memberID,mi.Logname logname,mai.Certification_ID certificationID,
    mai.Record_Date recordDate,mai.Status status,mai.Attest_Type_ID attestTypeID,mai.End_Date endDate,
	mat.Attest_TypeName attestTypeName,(SELECT name1 from DICT where tcode='DICT_HYRZZT' and code1=mai.Status LIMIT 1) AS statuname,
	CONVERT((AES_DECRYPT(UNHEX(ci.Compang_Name),#{map.skey})) using utf8) company
	,CONVERT((AES_DECRYPT(UNHEX(ela.Permits_Code),#{map.skey})) using utf8) permitsCode
	,CONVERT((AES_DECRYPT(UNHEX(ela.Permits_Bank),#{map.skey})) using utf8) permitsBank
	,CONVERT((AES_DECRYPT(UNHEX(ela.Bank_No),#{map.skey})) using utf8) bankNo
	from Member_Attest_Info mai 
	left join Member_Info mi ON mi.Member_ID=mai.Member_ID
	left join Company_Info ci on ci.Company_ID = mi.Company_ID
	LEFT JOIN Member_Attest_Type mat ON mat.Attest_Type_ID=mai.Attest_Type_ID
	LEFT JOIN Enterprise_AccountPermits_Attest ela ON ela.Certification_ID=mai.Certification_ID
	<where>
	    mi.Member_Type=1 and mat.Attest_Type_ID=#{map.attestTypeID}
		and mai.Status=#{map.status}
		<if test="map.logname!=null and map.logname!=''">
			and mi.Logname like '%${map.logname}%'
		</if>
		<if test="map.companyName!=null and map.companyName!='' ">
			and CONVERT((AES_DECRYPT(UNHEX(ci.Compang_Name),#{map.skey})) using utf8) like '%${map.companyName}%'
		</if>
	</where>  
    </select>
    
       <!-- 企业房产认证列表查询+ -->
    <select id="HouseAuthentication" resultType="cn.membermng.model.MemberAttestByTypeEntity" parameterType="product_p2p.kit.pageselect.PageEntity" >
    	select mi.Member_No memberNo,mi.Member_ID memberID,mi.Logname logname,mai.Certification_ID certificationID,
	    mai.Record_Date recordDate,mai.Status status,mai.Attest_Type_ID attestTypeID,
		mat.Attest_TypeName attestTypeName,(SELECT name1 from DICT where tcode='DICT_HYRZZT' and code1=mai.Status LIMIT 1) AS statuname,
		CONVERT((AES_DECRYPT(UNHEX(ci.Compang_Name),#{map.skey})) using utf8) company,
		ela.Address address,ela.Area area,ela.Value value,mai.End_Date validTime
		from Member_Attest_Info mai 
		left join Member_Info mi ON mi.Member_ID=mai.Member_ID
		left join Company_Info ci on ci.Company_ID = mi.Company_ID
		LEFT JOIN Member_Attest_Type mat ON mat.Attest_Type_ID=mai.Attest_Type_ID
		LEFT JOIN Enterprise_Estate_Check ela ON ela.Certification_ID=mai.Certification_ID
		<where>
			mi.Member_Type=1 and mat.Attest_Type_ID=#{map.attestTypeID}
			and mai.Status=#{map.status}
			<if test="map.logname!=null and map.logname!=''">
				and mi.Logname like '%${map.logname}%'
			</if>
			<if test="map.companyName!=null and map.companyName!='' ">
				and CONVERT((AES_DECRYPT(UNHEX(ci.Compang_Name),#{map.skey})) using utf8) like '%${map.companyName}%'
			</if>
		</where>  
    </select>
    
        <!-- 企业车辆认证列表查询 + -->
    <select id="CarAuthentication" resultType="cn.membermng.model.MemberAttestByTypeEntity" parameterType="product_p2p.kit.pageselect.PageEntity" >
    	select mi.Member_No memberNo,mi.Member_ID memberID,mi.Logname logname,mai.Certification_ID certificationID,
	    mai.Record_Date recordDate,mai.Status status,mai.Attest_Type_ID attestTypeID,
		mat.Attest_TypeName attestTypeName,(SELECT name1 from DICT where tcode='DICT_HYRZZT' and code1=mai.Status LIMIT 1) AS statuname,
		CONVERT((AES_DECRYPT(UNHEX(ci.Compang_Name),#{map.skey})) using utf8) company,
		ela.Brand brand,ela.Model model,ela.License_Plate licensePlate,
		ela.Value value,mai.End_Date validTime
		from Member_Attest_Info mai 
		left join Member_Info mi ON mi.Member_ID=mai.Member_ID
		left join Company_Info ci on ci.Company_ID = mi.Company_ID
		LEFT JOIN Member_Attest_Type mat ON mat.Attest_Type_ID=mai.Attest_Type_ID
		LEFT JOIN Enterprise_Car_Check ela ON ela.Certification_ID=mai.Certification_ID
		<where>
			mi.Member_Type=1 and mat.Attest_Type_ID=#{map.attestTypeID}
			and mai.Status=#{map.status}
			<if test="map.logname!=null and map.logname!=''">
				and mi.Logname like '%${map.logname}%'
			</if>
			<if test="map.companyName!=null and map.companyName!='' ">
				and CONVERT((AES_DECRYPT(UNHEX(ci.Compang_Name),#{map.skey})) using utf8) like '%${map.companyName}%'
			</if>
		</where>  
    </select>
    <!-- 查看企业营业执照认证信息 -->
    <resultMap type="cn.membermng.model.EnterpriseLicenseAttestEntity" id="sEnterpriseLicenseAttest">
    	<result column="Certification_ID" property="certificationID"/>
    	<result column="Firm_BLN" property="firmBLN"/>
    	<result column="Firm_Address" property="firmAddress"/>
    	<result column="Firm_Legal" property="firmLegal"/>
    	<result column="Reg_Capital" property="regCapital"/>
    	<result column="Reg_Business" property="regBusiness"/>
    	<result column="Firm_Type" property="firmType"/>
    	<result column="Reg_Date" property="regDate"/>
    	<result column="Member_No" property="memberNo"/>
    	<result column="Member_ID" property="memberID"/>
    	<result column="Logname" property="logname"/>
    	<result column="Record_Date" property="recordDate"/>
    	<result column="Status" property="status"/>
    	<result column="Attest_Type_ID" property="attestTypeID"/>
    	<result column="Attest_TypeName" property="attestTypeName"/>
    	<result column="Statuname" property="statuname"/>
    </resultMap>
    <!-- 根据认证记录id查看企业认证信息 -->
    <select id="sEnterpriseLicenseAttestByID" resultType="cn.membermng.model.EnterpriseAttestEntity" parameterType="Map">
	    <if test="certificationType == 12"><!-- 根据认证记录id查看企业营业执照认证信息 -->
	    	select mi.Member_No memberNo,mi.Member_ID memberID,mi.Logname logname,mai.End_Date endDate
		    ,mai.Certification_ID certificationID,mai.Record_Date recordDate,mai.Status status,mai.Attest_Type_ID attestTypeID,
			mat.Attest_TypeName attestTypeName,(SELECT name1 from DICT where tcode='DICT_HYRZZT' and code1=mai.Status LIMIT 1) AS statuname,
			 ela.Reg_Capital regCapital,ela.Firm_Type firmType,ela.Reg_Date regDate,
			CONVERT((AES_DECRYPT(UNHEX(ela.Firm_BLN),#{skey})) using utf8) firmBLN,
			CONVERT((AES_DECRYPT(UNHEX(ela.Firm_Address),#{skey})) using utf8) firmAddress,
			CONVERT((AES_DECRYPT(UNHEX(ela.Firm_Legal),#{skey})) using utf8) firmLegal,
			CONVERT((AES_DECRYPT(UNHEX(ela.Reg_Business),#{skey})) using utf8) regBusiness,
			CONVERT((AES_DECRYPT(UNHEX(ci.Compang_Name),#{skey})) using utf8) company,
			group_concat(paa.Attach_Name) as attachName,
			group_concat(paa.Attach_Path) as attachPath 
			from Member_Attest_Info mai 
			left join Member_Info mi ON mi.Member_ID=mai.Member_ID
			left join Company_Info ci on ci.Company_ID = mi.Company_ID
			left join Personal_Attest_Attach paa on paa.Attest_ID = mai.Certification_ID
			LEFT JOIN Member_Attest_Type mat ON mat.Attest_Type_ID=mai.Attest_Type_ID
			LEFT JOIN Enterprise_License_Attest ela ON ela.Certification_ID=mai.Certification_ID
			where mi.Member_Type=1 and mai.Certification_ID=#{certificationID};
	    </if>
	    <if test="certificationType == 13"><!-- 根据认证记录id查看企业营业执照认证信息 -->
	    	select mi.Member_No memberNo,mi.Member_ID memberID,mi.Logname logname,mai.End_Date endDate
		    ,mai.Certification_ID certificationID,mai.Record_Date recordDate,mai.Status status,mai.Attest_Type_ID attestTypeID,
			mat.Attest_TypeName attestTypeName,(SELECT name1 from DICT where tcode='DICT_HYRZZT' and code1=mai.Status LIMIT 1) AS statuname,
			 ela.Reg_Capital regCapital,ela.Firm_Type firmType,ela.SetUp_Date sSetUpDate,
			CONVERT((AES_DECRYPT(UNHEX(ela.Firm_Legal),#{skey})) using utf8) firmLegal,
			CONVERT((AES_DECRYPT(UNHEX(ela.Reg_Business),#{skey})) using utf8) regBusiness,
			ela.Residence residence,ela.Real_Capital realCapital,
			CONVERT((AES_DECRYPT(UNHEX(ci.Compang_Name),#{skey})) using utf8) company,
			group_concat(paa.Attach_Name) as attachName,
			group_concat(paa.Attach_Path) as attachPath 
			from Member_Attest_Info mai 
			left join Member_Info mi ON mi.Member_ID=mai.Member_ID
			left join Company_Info ci on ci.Company_ID = mi.Company_ID
			left join Personal_Attest_Attach paa on paa.Attest_ID = mai.Certification_ID
			LEFT JOIN Member_Attest_Type mat ON mat.Attest_Type_ID=mai.Attest_Type_ID
			
			LEFT JOIN Enterprise_BsnLicense_Attest ela ON ela.Certification_ID=mai.Certification_ID
			
			where mi.Member_Type=1 and mai.Certification_ID=#{certificationID};
	    </if>
    	 <if test="certificationType == 14"><!-- 根据认证记录id查看组织机构代码认证信息 -->
	    	select mi.Member_No memberNo,mi.Member_ID memberID,mi.Logname logname,mai.End_Date endDate
		    ,mai.Certification_ID certificationID,mai.Record_Date recordDate,mai.Status status,mai.Attest_Type_ID attestTypeID,
			mat.Attest_TypeName attestTypeName,(SELECT name1 from DICT where tcode='DICT_HYRZZT' and code1=mai.Status LIMIT 1) AS statuname,
			CONVERT((AES_DECRYPT(UNHEX(ela.Firm_OC),#{skey})) using utf8) firmOC,
			ela.Reg_Date regDate,
			CONVERT((AES_DECRYPT(UNHEX(ci.Compang_Name),#{skey})) using utf8) company,
			group_concat(paa.Attach_Name) as attachName,
			group_concat(paa.Attach_Path) as attachPath 
			from Member_Attest_Info mai 
			left join Member_Info mi ON mi.Member_ID=mai.Member_ID
			left join Company_Info ci on ci.Company_ID = mi.Company_ID
			left join Personal_Attest_Attach paa on paa.Attest_ID = mai.Certification_ID
			LEFT JOIN Member_Attest_Type mat ON mat.Attest_Type_ID=mai.Attest_Type_ID
			
			LEFT JOIN Enterprise_OrgCode_Attest ela ON ela.Certification_ID=mai.Certification_ID
			
			where mi.Member_Type=1 and mai.Certification_ID=#{certificationID};
	    </if>
	    <if test="certificationType == 15"><!-- 根据认证记录id查看开户许可证认证信息 -->
	    	select mi.Member_No memberNo,mi.Member_ID memberID,mi.Logname logname,mai.End_Date endDate
		    ,mai.Certification_ID certificationID,mai.Record_Date recordDate,mai.Status status,mai.Attest_Type_ID attestTypeID,
			mat.Attest_TypeName attestTypeName,(SELECT name1 from DICT where tcode='DICT_HYRZZT' and code1=mai.Status LIMIT 1) AS statuname,
			
			CONVERT((AES_DECRYPT(UNHEX(ela.Permits_Code),#{skey})) using utf8) permitsCode,
			CONVERT((AES_DECRYPT(UNHEX(ela.Permits_Bank),#{skey})) using utf8) permitsBank,
			CONVERT((AES_DECRYPT(UNHEX(ela.Bank_No),#{skey})) using utf8) bankNo,
			
			CONVERT((AES_DECRYPT(UNHEX(ci.Compang_Name),#{skey})) using utf8) company,
			group_concat(paa.Attach_Name) as attachName,
			group_concat(paa.Attach_Path) as attachPath 
			from Member_Attest_Info mai 
			left join Member_Info mi ON mi.Member_ID=mai.Member_ID
			left join Company_Info ci on ci.Company_ID = mi.Company_ID
			left join Personal_Attest_Attach paa on paa.Attest_ID = mai.Certification_ID
			LEFT JOIN Member_Attest_Type mat ON mat.Attest_Type_ID=mai.Attest_Type_ID
			
			LEFT JOIN Enterprise_AccountPermits_Attest ela ON ela.Certification_ID=mai.Certification_ID
			
			where mi.Member_Type=1 and mai.Certification_ID=#{certificationID};
	    </if>
	    <if test="certificationType == 18"><!-- 根据认证记录id查看税务登记证认证信息 -->
	    	select mi.Member_No memberNo,mi.Member_ID memberID,mi.Logname logname,mai.End_Date endDate
		    ,mai.Certification_ID certificationID,mai.Record_Date recordDate,mai.Status status,mai.Attest_Type_ID attestTypeID,
			mat.Attest_TypeName attestTypeName,(SELECT name1 from DICT where tcode='DICT_HYRZZT' and code1=mai.Status LIMIT 1) AS statuname,
			
			CONVERT((AES_DECRYPT(UNHEX(ela.Credentials_NO),#{skey})) using utf8) credentialsNO,
			ela.Issue_Organ issueOrgan,
			
			CONVERT((AES_DECRYPT(UNHEX(ci.Compang_Name),#{skey})) using utf8) company,
			group_concat(paa.Attach_Name) as attachName,
			group_concat(paa.Attach_Path) as attachPath 
			from Member_Attest_Info mai 
			left join Member_Info mi ON mi.Member_ID=mai.Member_ID
			left join Company_Info ci on ci.Company_ID = mi.Company_ID
			left join Personal_Attest_Attach paa on paa.Attest_ID = mai.Certification_ID
			LEFT JOIN Member_Attest_Type mat ON mat.Attest_Type_ID=mai.Attest_Type_ID
			
			LEFT JOIN Enterprise_Taxation_Attest ela ON ela.Certification_ID=mai.Certification_ID
			
			where mi.Member_Type=1 and mai.Certification_ID=#{certificationID};
	    </if>
	    <if test="certificationType == 19"><!-- 根据认证记录id查看批文认证认证信息 -->
	    	select mi.Member_No memberNo,mi.Member_ID memberID,mi.Logname logname,mai.End_Date endDate
		    ,mai.Certification_ID certificationID,mai.Record_Date recordDate,mai.Status status,mai.Attest_Type_ID attestTypeID,
			mat.Attest_TypeName attestTypeName,(SELECT name1 from DICT where tcode='DICT_HYRZZT' and code1=mai.Status LIMIT 1) AS statuname,
			ela.File_Summary fileSummary,ela.Issue_Organ issueOrgan,ela.Issue_Date issueDate,
			ela.Issue_Organ issueOrgan,
			CONVERT((AES_DECRYPT(UNHEX(ci.Compang_Name),#{skey})) using utf8) company,
			group_concat(paa.Attach_Name) as attachName,
			group_concat(paa.Attach_Path) as attachPath 
			from Member_Attest_Info mai 
			left join Member_Info mi ON mi.Member_ID=mai.Member_ID
			left join Company_Info ci on ci.Company_ID = mi.Company_ID
			left join Personal_Attest_Attach paa on paa.Attest_ID = mai.Certification_ID
			LEFT JOIN Member_Attest_Type mat ON mat.Attest_Type_ID=mai.Attest_Type_ID
			LEFT JOIN Enterprise_RedHead_Attest ela ON ela.Certification_ID=mai.Certification_ID
			where mi.Member_Type=1 and mai.Certification_ID=#{certificationID};
	    </if>
	    <if test="certificationType == 22"><!-- 根据认证记录id查看房产认证认证信息 -->
	    	select mi.Member_No memberNo,mi.Member_ID memberID,mi.Logname logname,mai.End_Date endDate
		    ,mai.Certification_ID certificationID,mai.Record_Date recordDate,mai.Status status,mai.Attest_Type_ID attestTypeID,
			mat.Attest_TypeName attestTypeName,(SELECT name1 from DICT where tcode='DICT_HYRZZT' and code1=mai.Status LIMIT 1) AS statuname,
			ela.Address address,ela.Area area,ela.Value value,
			ela.Is_Mortgage isMortgage,
			CONVERT((AES_DECRYPT(UNHEX(ci.Compang_Name),#{skey})) using utf8) company,
			group_concat(paa.Attach_Name) as attachName,
			group_concat(paa.Attach_Path) as attachPath 
			from Member_Attest_Info mai 
			left join Member_Info mi ON mi.Member_ID=mai.Member_ID
			left join Company_Info ci on ci.Company_ID = mi.Company_ID
			left join Personal_Attest_Attach paa on paa.Attest_ID = mai.Certification_ID
			LEFT JOIN Member_Attest_Type mat ON mat.Attest_Type_ID=mai.Attest_Type_ID
			LEFT JOIN Enterprise_Estate_Check ela ON ela.Certification_ID=mai.Certification_ID
			where mi.Member_Type=1 and mai.Certification_ID=#{certificationID};
	    </if>
	    <if test="certificationType == 23"><!-- 根据认证记录id查看车辆认证认证信息 -->
	    	select mi.Member_No memberNo,mi.Member_ID memberID,mi.Logname logname,mai.End_Date endDate
		    ,mai.Certification_ID certificationID,mai.Record_Date recordDate,mai.Status status,mai.Attest_Type_ID attestTypeID,
			mat.Attest_TypeName attestTypeName,(SELECT name1 from DICT where tcode='DICT_HYRZZT' and code1=mai.Status LIMIT 1) AS statuname,
			ela.Brand brand,ela.Model model,ela.License_Plate licensePlate,
			ela.Value value,
			ela.Is_Mortgage isMortgage,
			CONVERT((AES_DECRYPT(UNHEX(ci.Compang_Name),#{skey})) using utf8) company,
			group_concat(paa.Attach_Name) as attachName,
			group_concat(paa.Attach_Path) as attachPath 
			from Member_Attest_Info mai 
			left join Member_Info mi ON mi.Member_ID=mai.Member_ID
			left join Company_Info ci on ci.Company_ID = mi.Company_ID
			left join Personal_Attest_Attach paa on paa.Attest_ID = mai.Certification_ID
			LEFT JOIN Member_Attest_Type mat ON mat.Attest_Type_ID=mai.Attest_Type_ID
			LEFT JOIN Enterprise_Car_Check ela ON ela.Certification_ID=mai.Certification_ID
			where mi.Member_Type=1 and mai.Certification_ID=#{certificationID};
	    </if>
	    <if test="certificationType == 16 or certificationType == 17 or certificationType == 20 or certificationType ==21 or certificationType>23 "><!-- 根据认证记录id查看其他认证信息 -->
	    	select mi.Member_No memberNo,mi.Member_ID memberID,mi.Logname logname,mai.End_Date endDate
		    ,mai.Certification_ID certificationID,mai.Record_Date recordDate,mai.Status status,mai.Attest_Type_ID attestTypeID,
			mat.Attest_TypeName attestTypeName,(SELECT name1 from DICT where tcode='DICT_HYRZZT' and code1=mai.Status LIMIT 1) AS statuname,
			CONVERT((AES_DECRYPT(UNHEX(ci.Compang_Name),#{skey})) using utf8) company,
			group_concat(paa.Attach_Name) as attachName,
			group_concat(paa.Attach_Path) as attachPath 
			from Member_Attest_Info mai 
			left join Member_Info mi ON mi.Member_ID=mai.Member_ID
			left join Company_Info ci on ci.Company_ID = mi.Company_ID
			left join Personal_Attest_Attach paa on paa.Attest_ID = mai.Certification_ID
			LEFT JOIN Member_Attest_Type mat ON mat.Attest_Type_ID=mai.Attest_Type_ID
			where mi.Member_Type=1 and mai.Certification_ID=#{certificationID};
	    </if>
    </select>
    <!-- 操作企业营业执照认证 -->
    <select id="handleEnterpriseCerAudit" resultType="Map" statementType="CALLABLE">
    <!-- statusT:2 通过审核 3：打回；rulest：1：操作成功 2：该认证项已认证 -->
    	<![CDATA[{call handleEnterpriseCerAudit(
				#{certificationID,	 mode=IN,	jdbcType=BIGINT},
				#{memberID,	 mode=IN,	jdbcType=BIGINT},
				#{statusT,	 mode=IN,	jdbcType=INTEGER},
				#{adminID,	 mode=IN,	jdbcType=BIGINT},
				#{remark,	 mode=IN,	jdbcType=VARCHAR},
				#{endDate,	 mode=IN,	jdbcType=DATE},
				#{sfirmBLN,	 mode=IN,	jdbcType=VARCHAR},
				#{sfirmAddress,	 mode=IN,	jdbcType=VARCHAR},
				#{regCapital,	 mode=IN,	jdbcType=VARCHAR},
				#{sregBusiness,	 mode=IN,	jdbcType=VARCHAR},
				#{personalId,	 mode=IN,	jdbcType=BIGINT},
				#{spersonalName,	 mode=IN,	jdbcType=VARCHAR},
				#{companyID,	 mode=IN,	jdbcType=BIGINT},
				#{creditIntegralID,	 mode=IN,	jdbcType=BIGINT},
				#{skey,	 mode=IN,	jdbcType=VARCHAR},
				#{rulest,	 mode=OUT,	jdbcType=INTEGER}
    		)}
    	]]>
    </select>
    <!-- 操作企业会员工商执照认证信息 -->
     <select id="handleEnterpriseBLAttest" resultType="Map" statementType="CALLABLE">
    <!-- statusT:2 通过审核 3：打回；rulest：1：操作成功 2：该认证项已认证 -->
    	<![CDATA[{call handleEnterpriseBLAttest(
				#{certificationID,	 mode=IN,	jdbcType=BIGINT},
				#{memberID,	 mode=IN,	jdbcType=BIGINT},
				#{statusT,	 mode=IN,	jdbcType=INTEGER},
				#{adminID,	 mode=IN,	jdbcType=BIGINT},
				#{remark,	 mode=IN,	jdbcType=VARCHAR},
				#{endDate,	 mode=IN,	jdbcType=DATE},
				#{regCapital,	 mode=IN,	jdbcType=VARCHAR},
				#{sregBusiness,	 mode=IN,	jdbcType=VARCHAR},
				#{personalId,	 mode=IN,	jdbcType=BIGINT},
				#{spersonalName,	 mode=IN,	jdbcType=VARCHAR},
				#{companyID,	 mode=IN,	jdbcType=BIGINT},
				#{creditIntegralID,	 mode=IN,	jdbcType=BIGINT},
				#{skey,	 mode=IN,	jdbcType=VARCHAR},
				#{rulest,	 mode=OUT,	jdbcType=INTEGER}
    		)}
    	]]>
    </select>
    <!-- 其他认证操作 -->
     <select id="handleAttest" resultType="Map" statementType="CALLABLE">
    <!-- statusT:2 通过审核 3：打回；rulest：1：操作成功 2：该认证项已认证 -->
    	<![CDATA[{call handleAttest(
				#{certificationID,	 mode=IN,	jdbcType=BIGINT},
				#{memberType,	 mode=IN,	jdbcType=INTEGER},
				#{memberID,	 mode=IN,	jdbcType=BIGINT},
				#{statusT,	 mode=IN,	jdbcType=INTEGER},
				#{adminID,	 mode=IN,	jdbcType=BIGINT},
				#{remark,	 mode=IN,	jdbcType=VARCHAR},
				#{endDate,	 mode=IN,	jdbcType=DATE},
				#{creditIntegralID,	 mode=IN,	jdbcType=INTEGER},
				#{rulest,	 mode=OUT,	jdbcType=INTEGER}
    		)}
    	]]>
    </select>
    <!-- 个人会员最高学历认证操作 -->
     <select id="handlequalification" resultType="Map" statementType="CALLABLE">
    <!-- statusT:2 通过审核 3：打回；rulest：1：操作成功 2：该认证项已认证 -->
    	<![CDATA[{call handlequalification(
				#{certificationID,	 mode=IN,	jdbcType=BIGINT},
				#{memberType,	 mode=IN,	jdbcType=INTEGER},
				#{memberID,	 mode=IN,	jdbcType=BIGINT},
				#{statusT,	 mode=IN,	jdbcType=INTEGER},
				#{adminID,	 mode=IN,	jdbcType=BIGINT},
				#{remark,	 mode=IN,	jdbcType=VARCHAR},
				#{endDate,	 mode=IN,	jdbcType=DATE},
				#{creditIntegralID,	 mode=IN,	jdbcType=BIGINT},
				#{education,	 mode=IN,	jdbcType=INTEGER},
				#{personalID,	 mode=IN,	jdbcType=BIGINT},
				#{rulest,	 mode=OUT,	jdbcType=INTEGER}
    		)}
    	]]>
    </select>
    <!-- 个人会员实名认证操作 -->
    <select id="handlenameAuthentication" resultType="Map" statementType="CALLABLE">
    <!-- statusT:2 通过审核 3：打回；rulest：1：操作成功 2：该认证项已认证 -->
    <!-- 				#{spersonalIDCard,	 mode=IN,	jdbcType=VARCHAR}, -->
<!-- 				#{spersonalName,	 mode=IN,	jdbcType=VARCHAR}, -->
<!-- 				#{shomeTown,	 mode=IN,	jdbcType=VARCHAR}, -->
<!-- 				#{sexIDs,	 mode=IN,	jdbcType=INTEGER}, -->
<!-- 				#{nationId,	 mode=IN,	jdbcType=INTEGER}, -->
    	<![CDATA[{call handlenameAuthentication(
				#{certificationID,	 mode=IN,	jdbcType=BIGINT},
				#{memberType,	 mode=IN,	jdbcType=INTEGER},
				#{memberID,	 mode=IN,	jdbcType=BIGINT},
				#{statusT,	 mode=IN,	jdbcType=INTEGER},
				#{adminID,	 mode=IN,	jdbcType=BIGINT},
				#{remark,	 mode=IN,	jdbcType=VARCHAR},
				#{endDate,	 mode=IN,	jdbcType=DATE},
				#{creditIntegralID,	 mode=IN,	jdbcType=INTEGER},
				#{personalID,	 mode=IN,	jdbcType=BIGINT},
				#{skey,	 mode=IN,	jdbcType=VARCHAR},
				#{rulest,	 mode=OUT,	jdbcType=INTEGER}
    		)}
    	]]>
    </select>
    <!-- 个人会员婚姻认证操作 -->
    <select id="handlemarriage" resultType="Map" statementType="CALLABLE">
    <!-- statusT:2 通过审核 3：打回；rulest：1：操作成功 2：该认证项已认证 -->
    	<![CDATA[{call handlemarriage(
				#{certificationID,	 mode=IN,	jdbcType=BIGINT},
				#{memberType,	 mode=IN,	jdbcType=INTEGER},
				#{memberID,	 mode=IN,	jdbcType=BIGINT},
				#{statusT,	 mode=IN,	jdbcType=INTEGER},
				#{adminID,	 mode=IN,	jdbcType=BIGINT},
				#{remark,	 mode=IN,	jdbcType=VARCHAR},
				#{endDate,	 mode=IN,	jdbcType=DATE},
				#{creditIntegralID,	 mode=IN,	jdbcType=BIGINT},
				#{maritalStatus,	 mode=IN,	jdbcType=INTEGER},
				#{personalID,	 mode=IN,	jdbcType=BIGINT},
				#{rulest,	 mode=OUT,	jdbcType=INTEGER}
    		)}
    	]]>
    </select>
    
    <!-- 个人会员住址认证操作 -->
     <select id="handleAddress" resultType="Map" statementType="CALLABLE">
    <!-- statusT:2 通过审核 3：打回；rulest：1：操作成功 2：该认证项已认证 -->
    	<![CDATA[{call handleAddress(
				#{certificationID,	 mode=IN,	jdbcType=BIGINT},
				#{memberType,	 mode=IN,	jdbcType=INTEGER},
				#{memberID,	 mode=IN,	jdbcType=BIGINT},
				#{statusT,	 mode=IN,	jdbcType=INTEGER},
				#{adminID,	 mode=IN,	jdbcType=BIGINT},
				#{remark,	 mode=IN,	jdbcType=VARCHAR},
				#{endDate,	 mode=IN,	jdbcType=DATE},
				#{creditIntegralID,	 mode=IN,	jdbcType=BIGINT},
				#{shouseAddress,	 mode=IN,	jdbcType=VARCHAR},
				#{personalID,	 mode=IN,	jdbcType=BIGINT},
				#{skey,	 mode=IN,	jdbcType=INTEGER},
				#{rulest,	 mode=OUT,	jdbcType=INTEGER}
    		)}
    	]]>
    </select>
    <select id="VipPurchaseRecords" parameterType="product_p2p.kit.pageselect.PageEntity" resultType="cn.membermng.model.VIPPurchaseRecordsEntity">
    	select 
		App_Date 			as addTime,
		Certify_Type 		as vipType,
		Certify_SDate 		as statrTime,
		Certify_EDate  		as endTime,
		Certify_Fee 		as amount,
		(select name1 from  dict where code1 = mvr.Certify_Type and tcode = 'DICT_VIPHQTJ') as vipTypeName
		from Member_VIP_Record mvr
    	where Member_ID = #{map.memberId}
    </select>
    
    
    
    <!-- 根据会员id查询会员自动投标设置 -->
    <select id="QueryMemberAutomaticBidSetting" parameterType="Map" resultType="cn.membermng.model.AutomaticBidSettingEntity">
    	select Member_ID memberID,Pro_Type proType,Status status
    	,Every_Money everyMoney,RateMin rateMin,
    	RateMax rateMax,YearMin yearMin,YearMax yearMax,
    	MonthMin monthMin,MonthMax monthMax,DayMin dayMin,DayMax dayMax ,
    	Reserved_Money reservedMoney from Member_App_Auto_Set where Member_ID = #{memberID} limit 1
    </select>
    <!-- 根据项目类型id 查询项目类型名称 -->
    <select id="findProjectBaseInfo" resultType="String" parameterType="Map">
    	select Project_Name from ProjectBaseInfo where Project_ID = #{projectID} limit 1
    </select>
    
    
    <!-- 根据项目类型id 查询还款方式 -->
    <select id="findHKFS" resultType="Map" statementType="CALLABLE">
    	<![CDATA[{call findHKFS(
				#{status,	 mode=IN,	jdbcType=VARCHAR},
				#{result,	 mode=OUT,	jdbcType=VARCHAR}
    		)}
    	]]>
    </select>
    
    <!-- 自动投标设置 -->
     <select id="AutomaticBidSetting" resultType="Map" statementType="CALLABLE">
    <!--result ：-1：已存在自动投标设置  -2：还未开户  -3：还未进行自动投标授权 0：成功-->
    	<![CDATA[{call AutomaticBidSetting(
				#{memberId,	 mode=IN,	jdbcType=BIGINT},
				#{proType,	 mode=IN,	jdbcType=VARCHAR},
				#{status,	 mode=IN,	jdbcType=VARCHAR},
				#{everyMoney,	 mode=IN,	jdbcType=INTEGER},
				#{rateMin,	 mode=IN,	jdbcType=INTEGER},
				#{rateMax,	 mode=IN,	jdbcType=INTEGER},
				#{yearMin,	 mode=IN,	jdbcType=INTEGER},
				#{yearMax,	 mode=IN,	jdbcType=INTEGER},
				#{monthMin,	 mode=IN,	jdbcType=INTEGER},
				#{monthMax,	 mode=IN,	jdbcType=INTEGER},
				#{dayMin,	 mode=IN,	jdbcType=INTEGER},
				#{dayMax,	 mode=IN,	jdbcType=INTEGER},
				#{reservedMoney,	 mode=IN,	jdbcType=INTEGER},
				#{result,	 mode=OUT,	jdbcType=INTEGER}
    		)}
    	]]>
    </select>
    <!-- 删除自动投标设置 -->
    <delete id="delAutomaticBidSetting">
    	delete from Member_App_Auto_Set where Member_ID=#{memberID}
    </delete>
    
    <!-- 分配理财顾问列表查询 -->
    <select id="findFinancialAdvisor"  parameterType="product_p2p.kit.pageselect.PageEntity" resultType="cn.membermng.model.FinancialAdvisorEntity">
    	select FA_ID fAID,fa.Service_No serviceNo,
    	CONVERT((AES_DECRYPT(UNHEX(fa.Service_Phone),#{map.skey})) using utf8) servicePhone
    	,mi.Logname logName,fa.Record_Date recordDate,
    	CONVERT((AES_DECRYPT(UNHEX(pbi.Personal_Name),#{map.skey})) using utf8) realName
    	from Financial_Advisor fa
    	 left join Member_Info mi on fa.Member_ID= mi.Member_ID
    	 left join Personal_Base_Info pbi on pbi.Personal_Id = mi.Personal_Id
    	<where>
    		fa.Service_Statu = 0
    		<if test="map.servicePhone != null and map.servicePhone !='' ">
    			and servicePhone like '%${map.servicePhone}%'
    		</if>
    		<if test="map.realName != null and map.realName !='' ">
    			and realName like '%${map.realName}%'
    		</if>
    		<if test="map.serviceNo != null and map.serviceNo !='' ">
    			and serviceNo like '%${map.serviceNo}%'
    		</if>
    	</where>
    </select>
    <!-- 给会员分配理财顾问 -->
    <select id="DistributionFinancialAdvisor" resultType="Map" statementType="CALLABLE">
    	<!--types:1:分配理财顾问 2:变更理财顾问  result ：1:成功 ；-1; 已存在理财顾问，请到会员管理变更理财顾问-->
    	<![CDATA[{call DistributionFinancialAdvisor(
				#{memberID,	 mode=IN,	jdbcType=BIGINT},
				#{advisorId,	 mode=IN,	jdbcType=BIGINT},
				#{oldadvisorId,	 mode=IN,	jdbcType=BIGINT},
				#{types,	 mode=IN,	jdbcType=INTEGER},
				#{result,	 mode=OUT,	jdbcType=INTEGER}
    		)}
    	]]>
    </select>
    <!-- 待分配理财顾问会员 -->
    <select id="ExistingFinancialAdvisor" parameterType="product_p2p.kit.pageselect.PageEntity" resultType="cn.membermng.model.ExistingFinancialAdvisorEntity">
		select * from(SELECT mi.Member_ID memberID,Logname logName,Reg_Date regDate,Member_No memberNo,
		<if test="map.memberType ==0">
			CONVERT((AES_DECRYPT(UNHEX(pbi.Personal_Name),#{map.skey})) using utf8) personalName,
		</if>
		<if test="map.memberType ==1">
			CONVERT((AES_DECRYPT(UNHEX(ci.Compang_Name),#{map.skey})) using utf8) personalName,
		</if>
		
		
		(SELECT count(*) from Member_Third_Info mti WHERE mti.Member_ID = mi.Member_ID AND mti.Member_Type=0) therStatu
		from Member_Info mi  
		LEFT JOIN Personal_Base_Info pbi ON pbi.Personal_Id = mi.Personal_Id
		left join Company_Info ci on ci.Company_ID = mi.Company_ID
    	<where>
    		mi.Member_Type = #{map.memberType} and
    	  (SELECT count(*) FROM Member_Financial_Advisor mfa WHERE mfa.Member_ID = mi.Member_ID )=0 ) cc
		<!-- + 会员类型 -->
    		<if test="map.memberNo!=null and map.memberNo !=''">
    			and memberNo like '%${map.memberNo}%'
    		</if>
    		<if test="map.logName!=null and map.logName !=''">
    			and logName like '%${map.logName}%'
    		</if>
    		<if test="map.personalName!=null and map.personalName !=''">
    			and personalName like '%${map.personalName}%'
    		</if>
    		<if test="map.startTime!=null and map.startTime !=''">
    			and regDate >= #{map.startTime}
    		</if>
    		<if test="map.endTime!=null and map.endTime !=''">
    			and #{map.endTime} >= regDate
    		</if>
    	</where>
    </select>
    
    <select id="HasFinancialAdvisor" parameterType="product_p2p.kit.pageselect.PageEntity" resultType="cn.membermng.model.ExistingFinancialAdvisorEntity">
    	select * from(SELECT mi.Member_ID memberID,Logname logName,Reg_Date regDate,Member_No memberNo,
		<if test="map.memberType ==0">
			CONVERT((AES_DECRYPT(UNHEX(pbi.Personal_Name),#{map.skey})) using utf8) personalName,
		</if>
		<if test="map.memberType ==1">
			CONVERT((AES_DECRYPT(UNHEX(ci.Compang_Name),#{map.skey})) using utf8) personalName,
		</if>
		(SELECT count(*) from Member_Third_Info mti WHERE mti.Member_ID = mi.Member_ID AND mti.Member_Type=0) therStatu,
		(SELECT CONVERT((AES_DECRYPT(UNHEX(pbis.Personal_Name),#{map.skey})) using utf8) userName FROM Member_Financial_Advisor mfa 
			LEFT JOIN Financial_Advisor fa ON mfa.FA_ID = FA.FA_ID
				LEFT JOIN Member_Info mei ON mei.Member_ID = fa.Member_ID
					LEFT JOIN Personal_Base_Info pbis ON pbis.Personal_Id = mei.Personal_Id 
						WHERE mi.Member_ID=mfa.Member_ID LIMIT 1) fAName,
		(SELECT mfa.FA_ID FROM Member_Financial_Advisor mfa 
			LEFT JOIN Financial_Advisor fa ON mfa.FA_ID = fa.FA_ID
				LEFT JOIN Member_Info mei ON mei.Member_ID = mfa.Member_ID
					LEFT JOIN Personal_Base_Info pbis ON pbis.Personal_Id = mei.Personal_Id 
						WHERE mi.Member_ID=mfa.Member_ID LIMIT 1) faid
		from Member_Info mi  
		LEFT JOIN Personal_Base_Info pbi ON pbi.Personal_Id = mi.Personal_Id 
		left join Company_Info ci on ci.Company_ID = mi.Company_ID where
		mi.Member_Type = #{map.memberType} and (SELECT count(*) FROM Member_Financial_Advisor mfa WHERE mfa.Member_ID = mi.Member_ID )>0
		) newTab
		<where>
			1=1
			<if test="map.memberNo!=null and map.memberNo !=''">
    			and memberNo like '%${map.memberNo}%'
    		</if>
    		<if test="map.logName!=null and map.logName !=''">
    			and logName like '%${map.logName}%'
    		</if>
    		<if test="map.personalName!=null and map.personalName !=''">
    			and personalName like '%${map.personalName}%'
    		</if>
    		<if test="map.startTime!=null and map.startTime !=''">
    			and regDate >= #{map.startTime}
    		</if>
    		<if test="map.endTime!=null and map.endTime !=''">
    			and #{map.endTime} >= regDate
    		</if>
    		<if test="map.fAName!=null and map.fAName !=''">
    			and fAName like '%${map.fAName}%'
    		</if>
		</where>
    </select>
    
    
    <select id="ChangeHistory" parameterType="product_p2p.kit.pageselect.PageEntity" resultType="cn.membermng.model.ExistingFinancialAdvisorEntity">
    	select CONVERT((AES_DECRYPT(UNHEX(pbi.Personal_Name),#{map.skey})) using utf8) as fAName,mfa.Remove_Date regDate from Member_Financial_Advisor mfa left join Financial_Advisor fa
    		ON mfa.FA_ID = fa.FA_ID
    		LEFT JOIN Member_Info si ON si.Member_Id = fa.Member_Id
    		LEFT JOIN Personal_Base_Info pbi ON si.Personal_Id = pbi.Personal_Id
    		where mfa.Member_ID = #{map.memberID} and mfa.Remove_Date is not null
    </select>
</mapper>   