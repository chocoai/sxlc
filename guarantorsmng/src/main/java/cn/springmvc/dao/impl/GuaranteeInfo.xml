<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!-- 担保机构 -->
<mapper namespace="GuaranteeInfoXML" >
	<!-- 担保公司 -->
  <resultMap id="GuaranteeInfo" type="cn.springmvc.model.GuaranteeInfoEntity" >
    <id column="Guarantee_ID" property="guaranteeID"/>
    <result column="Personal_Id" property="personalID"/>
    <result column="Guarantee_NO" property="guaranteeNo"/>
    <result column="Guarantee_Name" property="guaranteeName"/>
    <result column="Companye_BLN" property="companyeBLN"/>
    <result column="Company_OC" property="companyOC"/>
    <result column="Tax_RegNo" property="taxRegNo"/>
    <result column="Establishments" property="establishments"/>
    <result column="Company_Capital" property="companyCapital"/>
    <result column="Company_Address" property="companyAddress"/>
    <result column="Company_Source" property="companySource"/>
    <result column="Company_Business" property="companyBusiness"/>
    <result column="Company_Profile" property="companyProfile"/>
    <result column="Contact_Name" property="contactName"/>
    <result column="Contact_Phone" property="contactPhone"/>
    <result column="Contact_Email" property="contactEmail"/>
    <result column="Add_Time" property="cddTime"/>
    <result column="Record_Status" property="recordStatus"/>
    <result column="Delete_Flag" property="deleteFlag"/>
    <result column="Personal_Name" property="personalName"/>
    <result column="Personal_IDCard" property="personalIDCard"/>
    <result column="Personal_Phone" property="personalPhone"/>
  </resultMap>
  <sql id="GuaranteeInfo_Column_List" >
    	Guarantee_ID,pbi.Personal_Id,Guarantee_NO,
    	CONVERT((AES_DECRYPT(UNHEX(Guarantee_Name),#{map.skey})) using utf8) Guarantee_Name,
    	CONVERT((AES_DECRYPT(UNHEX(Companye_BLN),#{map.skey})) using utf8) Companye_BLN,
    	CONVERT((AES_DECRYPT(UNHEX(Company_OC),#{map.skey})) using utf8) Company_OC,
    	CONVERT((AES_DECRYPT(UNHEX(Tax_RegNo),#{map.skey})) using utf8) Tax_RegNo,
    	CONVERT((AES_DECRYPT(UNHEX(Establishments),#{map.skey})) using utf8) Establishments,
    	Company_Capital,
    	CONVERT((AES_DECRYPT(UNHEX(Company_Address),#{map.skey})) using utf8) Company_Address,
    	Company_Source,
    	CONVERT((AES_DECRYPT(UNHEX(Company_Business),#{map.skey})) using utf8) Company_Business,
    	Company_Profile,
    	CONVERT((AES_DECRYPT(UNHEX(Contact_Name),#{map.skey})) using utf8) Contact_Name,
    	CONVERT((AES_DECRYPT(UNHEX(Contact_Phone),#{map.skey})) using utf8) Contact_Phone,
    	CONVERT((AES_DECRYPT(UNHEX(Contact_Email),#{map.skey})) using utf8) Contact_Email,Add_Time,Record_Status,Delete_Flag,
    	CONVERT((AES_DECRYPT(UNHEX(pbi.Personal_Name),#{map.skey})) using utf8) Personal_Name,
    	CONVERT((AES_DECRYPT(UNHEX(pbi.Personal_IDCard),#{map.skey})) using utf8) Personal_IDCard,
    	CONVERT((AES_DECRYPT(UNHEX(pbi.Personal_Phone),#{map.skey})) using utf8) Personal_Phone
  </sql>
  <!-- 根据担保机构id 查询担保机构信息 -->
<!--   <select id="selectGuaranteeInfoById" resultMap="GuaranteeInfo" parameterType="Map" > -->
<!--    	select Guarantee_ID,gi.Personal_Id,Guarantee_NO,Guarantee_Name, -->
<!--     	Companye_BLN,Company_OC,Tax_RegNo,Establishments, -->
<!--     	Company_Capital,Company_Address,Company_Source, -->
<!--     	Company_Business,Company_Profile,Contact_Name, -->
<!--     	Contact_Phone,Contact_Email,Add_Time,Record_Status,Delete_Flag -->
<!--     	,pbi.Personal_Name,pbi.Personal_IDCard,pbi.Personal_Phone -->
<!--     from Guarantee_Info gi left join personal_base_info pbi on gi.Personal_Id=pbi.Personal_Id where Guarantee_ID=#{guaranteeID}; -->
<!--   </select> -->
  
  <select id="selectGuaranteeInfoById" resultMap="GuaranteeInfo" parameterType="Map" >
   	select 
   	Guarantee_ID,pbi.Personal_Id,Guarantee_NO,
    	CONVERT((AES_DECRYPT(UNHEX(Guarantee_Name),#{skey})) using utf8) Guarantee_Name,
    	CONVERT((AES_DECRYPT(UNHEX(Companye_BLN),#{skey})) using utf8) Companye_BLN,
    	CONVERT((AES_DECRYPT(UNHEX(Company_OC),#{skey})) using utf8) Company_OC,
    	CONVERT((AES_DECRYPT(UNHEX(Tax_RegNo),#{skey})) using utf8) Tax_RegNo,
    	CONVERT((AES_DECRYPT(UNHEX(Establishments),#{skey})) using utf8) Establishments,
    	Company_Capital,
    	CONVERT((AES_DECRYPT(UNHEX(Company_Address),#{skey})) using utf8) Company_Address,
    	Company_Source,
    	CONVERT((AES_DECRYPT(UNHEX(Company_Business),#{skey})) using utf8) Company_Business,
    	Company_Profile,
    	CONVERT((AES_DECRYPT(UNHEX(Contact_Name),#{skey})) using utf8) Contact_Name,
    	CONVERT((AES_DECRYPT(UNHEX(Contact_Phone),#{skey})) using utf8) Contact_Phone,
    	CONVERT((AES_DECRYPT(UNHEX(Contact_Email),#{skey})) using utf8) Contact_Email,Add_Time,Record_Status,Delete_Flag,
    	CONVERT((AES_DECRYPT(UNHEX(pbi.Personal_Name),#{skey})) using utf8) Personal_Name,
    	CONVERT((AES_DECRYPT(UNHEX(pbi.Personal_IDCard),#{skey})) using utf8) Personal_IDCard,
    	CONVERT((AES_DECRYPT(UNHEX(pbi.Personal_Phone),#{skey})) using utf8) Personal_Phone
    from Guarantee_Info gi left join personal_base_info pbi on gi.Personal_Id=pbi.Personal_Id where Guarantee_ID=#{guaranteeID};
  </select>
  
  <!-- 分页查询所有担保机构信息 -->
  <select id="selectAllGuaranteeInfo" resultMap="GuaranteeInfo" parameterType="product_p2p.kit.pageselect.PageEntity">
  	select <include refid="GuaranteeInfo_Column_List"></include> 
  	from Guarantee_Info gi left join personal_base_info pbi on gi.Personal_Id=pbi.Personal_Id
  	<where>
  		<!-- 编号、担保机构名称、营业执照号、联系人姓名、联系人手机号、状态 -->
  		<if test="map.guaranteeNo!=null and map.guaranteeNo!=''">and gi.Guarantee_NO like '%${map.guaranteeNo}%'</if>
  		<if test="map.guaranteeName != null  and map.guaranteeName!=''">and gi.Guarantee_Name like '%${map.guaranteeName}%'</if>
  		<if test="map.companyeBLN != null  and map.companyeBLN!=''">and gi.Companye_BLN like '%${map.companyeBLN}%'</if>
  		<if test="map.contactName != null  and map.contactName!=''">and gi.Contact_Name like '%${map.contactName}%'</if>
  		<if test="map.contactPhone !=null  and map.contactPhone!=''">and gi.Contact_Phone like '%${map.contactPhone}%'</if>
  		<if test="map.recordStatus != -1">and gi.Record_Status=#{map.recordStatus}</if>
  	</where>
  	 order by gi.Add_Time desc
  </select>
  
  <!-- 添加或修改担保机构信息 -->
  <select id="handleGuaranteeInfo" resultType="Map" statementType="CALLABLE">
  <!--types 0:添加  1：修改 ;result 0:成功 -1：担保机构名称存在 -2：营业执照号已存在-->
  		<![CDATA[{call handleGuaranteeInfo(
				#{guaranteeID,	 mode=IN,	jdbcType=BIGINT},
				#{guaranteeName,	 mode=IN,	jdbcType=VARCHAR},
				#{companyeBLN,	 mode=IN,	jdbcType=VARCHAR},
				#{companyOC,	 mode=IN,	jdbcType=VARCHAR},
				#{taxRegNo,	 mode=IN,	jdbcType=VARCHAR},
				#{establishments,	 mode=IN,	jdbcType=VARCHAR},
				#{companyCapital,	 mode=IN,	jdbcType=VARCHAR},
				#{companyAddress,	 mode=IN,	jdbcType=VARCHAR},
				#{companySource,	 mode=IN,	jdbcType=VARCHAR},
				#{companyBusiness,	 mode=IN,	jdbcType=VARCHAR},
				#{companyProfile,	 mode=IN,	jdbcType=INTEGER},
				#{contactName,	 mode=IN,	jdbcType=VARCHAR},
				#{contactPhone,	 mode=IN,	jdbcType=VARCHAR},
				#{contactEmail,	 mode=IN,	jdbcType=VARCHAR},
				#{personalPhone,	 mode=IN,	jdbcType=VARCHAR},
				#{personalName,	 mode=IN,	jdbcType=VARCHAR},
				#{personalIDCard,	 mode=IN,	jdbcType=VARCHAR},
				#{personalId,	 mode=IN,	jdbcType=BIGINT},
				#{types,	 mode=IN,	jdbcType=INTEGER},
				#{skey,	 mode=IN,	jdbcType=VARCHAR},
				#{result,	 mode=OUT,	jdbcType=INTEGER}
    		)}
    	]]>
  </select>
  <!-- 删除或启用停用 -->
  <update id="deleteOrStopGuaranteeInfo" parameterType="Map">
  		update Guarantee_Info 
  		<set>
  			<if test="recordStatus != -1">
  				Record_Status=#{recordStatus},
  			</if>
  			<if test="deleteFlag != -1">
  				Delete_Flag=#{deleteFlag}
  			</if>
  		</set>
  		<where>
  			Guarantee_ID=#{guaranteeID}
  		</where> 
  </update>
  
  <!-- 担保机构证件信息 -->
  <resultMap id="GuaranteeCertificate" type="cn.springmvc.model.GuaranteeCertificateEntity" >
  	<result column="Guarantee_ID" property="guaranteeID"/>
  	<result column="Guarantee_Type" property="guaranteeType"/>
  	<result column="Guarantee_Certificate_Name" property="guaranteeCertificateName"/>
  	<result column="Guarantee_URL" property="guaranteeURL"/>
  	<result column="guaranteeTypeName" property="guaranteeTypeName"/>
  </resultMap>
  <!-- 根据担保机构id查询证件信息 -->
  <select id="selectGuaranteeCertificate" resultMap="GuaranteeCertificate" parameterType="Map">
  	select Guarantee_ID,Guarantee_Type,Guarantee_Certificate_Name,Guarantee_URL from Guarantee_Certificate 
  	<where>
  		Guarantee_ID = #{guaranteeID}
  	</where>
  </select>
  
  <!-- 添加担保机构证件 -->
  <insert id="insertGuaranteeCertificate" parameterType="java.util.List">
  	insert into Guarantee_Certificate(Guarantee_ID,Guarantee_Type,Guarantee_Certificate_Name,Guarantee_URL)
  	values
	  	<foreach collection="list" item="item" index="index"
	  separator=",">
	  ( #{item.guaranteeID}, #{item.guaranteeType}, #{item.guaranteeCertificateName},
	  #{item.guaranteeURL})
	  </foreach>
  </insert>
  <!-- 根据担保机构id删除所有证件信息 -->
  <delete id="deleteGuaranteeCertificate">
  	delete from Guarantee_Certificate 
  	<where>
  		Guarantee_ID=#{guaranteeID}
  	</where>
  </delete>
  
  
  
  <!-- 资产管理方信息 -->
  <resultMap id="ManagementInfo" type="cn.springmvc.model.ManagementInfoEntity" >
    <id column="Management_ID" property="managementID"/>
    <result column="Personal_Id" property="personalID"/>
    <result column="Management_NO" property="managementNO"/>
    <result column="Management_Name" property="managementName"/>
     <result column="Companye_BLN" property="companyeBLN"/>
    <result column="Company_OC" property="companyOC"/>
    <result column="Tax_RegNo" property="taxRegNo"/>
    <result column="Establishments" property="establishments"/>
    <result column="Company_Capital" property="companyCapital"/>
    <result column="Company_Address" property="companyAddress"/>
    <result column="Company_Source" property="companySource"/>
    <result column="Company_Business" property="companyBusiness"/>
    <result column="Company_Profile" property="companyProfile"/>
    <result column="Contact_Name" property="contactName"/>
    <result column="Contact_Phone" property="contactPhone"/>
    <result column="Contact_Email" property="contactEmail"/>
    <result column="Add_Time" property="addTime"/>
    <result column="Record_Status" property="recordStatus"/>
    <result column="Delete_Flag" property="deleteFlag"/>
    <result column="Personal_Name" property="personalName"/>
    <result column="Personal_IDCard" property="personalIDCard"/>
    <result column="Personal_Phone" property="personalPhone"/>
    <result column="ThirdParty_Account" property="thirdPartyAccount"/>
  </resultMap>
  
  
  <!-- 根据资产管理方id 查询资产管理方信息 -->
  <select id="selectManagementInfoById" resultMap="ManagementInfo" parameterType="Map" >
   	select mi.*,pbi.Personal_Name,pbi.Personal_IDCard,pbi.Personal_Phone,mti.ThirdParty_Account from Management_Info mi
   		left join personal_base_info pbi on mi.Personal_Id=pbi.Personal_Id
   		left join Member_Third_Info mti on mti.Member_ID=mi.Management_ID and mti.Member_Type = 1
   		where Management_ID=#{managementID};
  </select>
  
  <!-- 分页查询所有资产管理方信息 -->
  <select id="selectAllManagementInfo" resultMap="ManagementInfo" parameterType="product_p2p.kit.pageselect.PageEntity">
  	select mi.*,pbi.Personal_Name,pbi.Personal_IDCard,pbi.Personal_Phone,mti.ThirdParty_Account 
  	from Management_Info mi
  	left join personal_base_info pbi on mi.Personal_Id=pbi.Personal_Id
  	left join Member_Third_Info mti on mti.Member_ID=mi.Management_ID and mti.Member_Type = 1
  	<where>
  		<!-- 编号、资产管理方名称、营业执照号、联系人姓名、联系人手机号、状态 -->
  		<!-- mi.Delete_Flag=1
  		<if test="map.managementNo!=null">and mi.Management_NO like '%${map.managementNo}%'</if>
  		<if test="map.managementName != null">and mi.Management_Name like '%${map.managementName}%'</if>
  		<if test="map.companyeBLN != null">and mi.Companye_BLN like '%${map.companyeBLN}%'</if>
  		<if test="map.contactName != null ">and mi.Contact_Name like '%${map.contactName}%'</if>
  		<if test="map.contactPhone !=null">and mi.Contact_Phone like '%${map.contactPhone}%'</if>
  		<if test="map.recordStatus != -1">and mi.Record_Status=#{map.recordStatus}</if> -->
  	</where>
  	 order by mi.Add_Time DESC
  </select>
  <!--根据资产管理方id 删除或启用停用资产管理方 -->
  <update id="deleteOrStopManagementInfo" parameterType="Map">
  		update Management_Info 
  		<set>
  			<if test="recordStatus != -1">
  				Record_Status=#{recordStatus},
  			</if>
  			<if test="deleteFlag != -1">
  				Delete_Flag=#{deleteFlag}
  			</if>
  		</set>
  		<where>
  			Management_ID=#{managementID}
  		</where> 
  </update>
  
  
  
  <!-- 添加或修改资产管理方信息 -->
  <select id="handleManagementInfo" resultType="Map" statementType="CALLABLE">
  <!--types 0:添加  1：修改 ;result 0:成功 -1：资产管理方名称存在 -2：营业执照号已存在-->
  		<![CDATA[{call handleManagementInfo(
				#{managementID,	 mode=IN,	jdbcType=BIGINT},
				#{managementName,	 mode=IN,	jdbcType=VARCHAR},
				#{companyeBLN,	 mode=IN,	jdbcType=VARCHAR},
				#{companyOC,	 mode=IN,	jdbcType=VARCHAR},
				#{taxRegNo,	 mode=IN,	jdbcType=VARCHAR},
				#{establishments,	 mode=IN,	jdbcType=VARCHAR},
				#{companyCapital,	 mode=IN,	jdbcType=VARCHAR},
				#{companyAddress,	 mode=IN,	jdbcType=VARCHAR},
				#{companySource,	 mode=IN,	jdbcType=VARCHAR},
				#{companyBusiness,	 mode=IN,	jdbcType=VARCHAR},
				#{companyProfile,	 mode=IN,	jdbcType=INTEGER},
				#{contactName,	 mode=IN,	jdbcType=VARCHAR},
				#{contactPhone,	 mode=IN,	jdbcType=VARCHAR},
				#{contactEmail,	 mode=IN,	jdbcType=VARCHAR},
				#{personalPhone,	 mode=IN,	jdbcType=VARCHAR},
				#{personalName,	 mode=IN,	jdbcType=VARCHAR},
				#{personalIDCard,	 mode=IN,	jdbcType=VARCHAR},
				#{personalId,	 mode=IN,	jdbcType=BIGINT},
				#{types,	 mode=IN,	jdbcType=INTEGER},
				#{result,	 mode=OUT,	jdbcType=INTEGER}
    		)}
    	]]>
  </select>
  
  
    
  <!-- 资产管理方证件信息 -->
  <resultMap id="ManagementCertificate" type="cn.springmvc.model.ManagementCertificateEntity" >
  	<result column="Management_ID" property="managementID"/>
  	<result column="Management_Type" property="managementType"/>
  	<result column="Management_Certificate_Name" property="managementCertificateName"/>
  	<result column="Management_URL" property="managementURL"/>
  	<result column="managementTypeName" property="managementTypeName"/>
  </resultMap>
  <!-- 根据资产管理方id查询证件信息 -->
  <select id="selectManagementCertificate" parameterType="Map" resultMap="ManagementCertificate">
  	select Management_ID,Management_Type,Management_Certificate_Name,Management_URL
  	 from Management_Certificate 
  	<where>
  		Management_ID = #{managementID}
  	</where>
  </select>
  
  <!-- 添加资产管理方证件 -->
  <insert id="insertManagementCertificate" parameterType="java.util.List">
  	insert into Management_Certificate(Management_ID,Management_Type,Management_Certificate_Name,Management_URL)
  	values
	  	<foreach collection="list" item="item" index="index"
	  separator=",">
	  ( #{item.managementID}, #{item.managementType}, #{item.managementCertificateName},
	  #{item.managementURL})
	  </foreach>
  </insert>
  <!-- 根据资产管理方id删除所有证件信息 -->
  <delete id="deleteManagementCertificate">
  	delete from Management_Certificate 
  	<where>
  		Management_ID=#{managementID}
  	</where>
  </delete>
  
  
  
  
  
  <!-- 担保机构担保借款范围 -->
  <resultMap id="GuaranteeBorrowing" type="cn.springmvc.model.GuaranteeBorrowingEntity" >
  	<result column="Guarantee_ID" property="guaranteeID"/>
  	<result column="Min_Amount" property="minAmount"/>
  	<result column="Max_Amount" property="maxAmount"/>
  </resultMap>
  <!-- 根据保荐机构id查询担保机构担保借款范围 -->
  <select id="selectGuaranteeBorrowing" resultMap="GuaranteeBorrowing" parameterType="Map">
  	select Guarantee_ID,Min_Amount,Max_Amount
  	 from Guarantee_Borrowing 
  	<where>
  		Guarantee_ID = #{guaranteeID}
  	</where>
  </select>
   <!-- 添加担保机构担保借款范围 -->
  <insert id="insertGuaranteeBorrowing" parameterType="Map">
  	insert into Guarantee_Borrowing(Guarantee_ID,Min_Amount,Max_Amount)
  		values(#{guaranteeID},#{minAmount},#{maxAmount})
  </insert>
   <!-- 根据保荐机构id修改担保机构担保借款范围 -->
  <update id="updateGuaranteeBorrowingByID" parameterType="Map">
  	update Guarantee_Borrowing
  		<set>
  			Min_Amount=#{minAmount},Max_Amount=#{maxAmount}
  		</set>
  		where Guarantee_ID=#{guaranteeID}
  </update>
  
  
  
  
  
  <!-- 担保机构期限范围设置 -->
  <resultMap id="GuaranteePeriod" type="cn.springmvc.model.GuaranteePeriodEntity" >
  	<result column="Guarantee_ID" property="guaranteeID"/>
  	<result column="Min_Deadline" property="minDeadline"/>
  	<result column="Max_Deadline" property="maxDeadline"/>
  	<result column="Deadline_Type" property="deadlineType"/>
  </resultMap>
  <!-- 根据保荐机构id,期限类型查询担保机构期限范围 -->
  <select id="selectGuaranteePeriod" resultMap="GuaranteePeriod" parameterType="Map">
  	select Guarantee_ID,Min_Deadline,Max_Deadline,Deadline_Type
  	 from Guarantee_Period 
  	<where>
  		Guarantee_ID = #{guaranteeID}
  	</where>
  </select>
   <!-- 添加担保机构期限范围 -->
  <insert id="insertGuaranteePeriod" parameterType="Map">
  	insert into Guarantee_Period(Guarantee_ID,Min_Deadline,Max_Deadline,Deadline_Type)
  		values(#{guaranteeID},#{minDeadline},#{maxDeadline},#{deadlineType})
  </insert>
   <!-- 根据保荐机构id,期限类型修改担保机构担保借款范围 -->
  <update id="updateGuaranteePeriodByID" parameterType="Map">
  	update Guarantee_Period
  		<set>
  			Min_Deadline=#{minDeadline},Max_Deadline=#{maxDeadline}
  		</set>
  		where Guarantee_ID=#{guaranteeID} and Deadline_Type=#{deadlineType}
  </update>
  
  
  
  <!-- 担保机构担保项目类型设置 -->
  <resultMap id="GuaranteeRelational" type="cn.springmvc.model.GuaranteeRelationalEntity" >
  	<result column="Guarantee_ID" property="guaranteeID"/>
  	<result column="Project_ID" property="projectID"/>
  	<result column="Project_Name" property="projectName"/>
  </resultMap>
  <!-- 根据保荐机构id,查询担保项目类型 -->
  <select id="selectGuaranteeRelational" resultMap="GuaranteeRelational" parameterType="Map">
  	select gr.Guarantee_ID,gr.Project_ID,pi.Project_Name
  	 from Guarantee_Relational gr left join ProjectBaseInfo pi on pi.Project_ID=gr.Project_ID 
  	<where>
  		gr.Guarantee_ID = #{guaranteeID}
  	</where>
  </select>
   <!-- 添加担保机构担保类型 -->
  <insert id="insertGuaranteeRelational" parameterType="java.util.List">
  	insert into Guarantee_Relational(Guarantee_ID,Project_ID)
  		values
  		<foreach collection="list" item="item" index="index"
	  separator=",">
	  ( #{item.guaranteeID}, #{item.projectID}})
	  </foreach>
  </insert>
   <!-- 根据担保机构id删除担保机构担保类型 -->
  <delete id="deleteGuaranteeRelationalByID" parameterType="Map">
  	delete from Guarantee_Period
  		where Guarantee_ID=#{guaranteeID}
  </delete>
  <!-- 根据担保机构id查询管理员信息 -->
  <select id="findGuaranteeAdmin" resultType="cn.springmvc.model.GuaranteeAdminEntity" parameterType="product_p2p.kit.pageselect.PageEntity">
  		SELECT a.Admin_ID adminID,a.adminName adminName,gmi.Add_Time addTime,gmi.Status status FROM Guarantee_Manage_Info gmi LEFT JOIN Admin a ON gmi.Admin_ID=a.Admin_ID
	WHERE gmi.Guarantee_ID=#{map.guaranteeID}
  </select>
  <!-- 根据资产管理方id查询管理员信息 -->
  <select id="findManagementAdmin" resultType="cn.springmvc.model.GuaranteeAdminEntity" parameterType="product_p2p.kit.pageselect.PageEntity">
  		SELECT a.Admin_ID adminID,a.adminName adminName,gmi.Add_Time addTime,gmi.Status status FROM Management_Manage_Info gmi LEFT JOIN Admin a ON gmi.Admin_ID=a.Admin_ID
	WHERE gmi.Management_ID=#{map.managementID}
  </select>
  
  
  <!-- 启用 停用 担保机构管理员 -->
  <update id="updateGuaranteeAdmin"  parameterType="Map">
  		update Guarantee_Manage_Info set Status=#{statu} where Guarantee_ID=#{guaranteeID} and Admin_ID=#{adminId}
  </update>
  <!-- 启用 停用 资产管理方管理员 -->
  <update id="updateManagementAdmin"  parameterType="Map">
  		update Management_Manage_Info set Status=#{statu} where Management_ID=#{managementID} and Admin_ID=#{adminId}
  </update>
  
  <update id="updateMGAdmin"  parameterType="Map">
  		update Admin set adminName=#{adminName},adminPwd=#{adminPwd},adminRemark=#{adminRemark} where Admin_ID=#{adminId} and Staff_Type = 4
  </update>
  <select id="selectAdmin" parameterType="Map" resultType="cn.springmvc.model.AdminGMEntity">
  		select adminName,adminPwd,adminRemark,Admin_ID adminId from Admin where Admin_ID=#{adminId} and Staff_Type = 4 limit 1
  </select>
  
  <!-- 添加担保机构 或资产管理方 管理员 -->
  <select id="insertGuaranteeAdmin" resultType="Map" statementType="CALLABLE">
  		<![CDATA[{call insertGuaranteeAdmin(
				#{adminID,	 mode=IN,	jdbcType=BIGINT},
				#{staffId,	 mode=IN,	jdbcType=BIGINT},
				#{adminName,	 mode=IN,	jdbcType=VARCHAR},
				#{adminPwd,	 mode=IN,	jdbcType=VARCHAR},
				#{adminRemark,	 mode=IN,	jdbcType=VARCHAR},
				#{stype,	 mode=IN,	jdbcType=INTEGER},
				#{result,	 mode=OUT,	jdbcType=INTEGER}
    		)}
    	]]>
  </select>
  <!-- 添加资产管理方管理员 -->
  <insert id="insertManagementAdmin" parameterType="Map">
  		insert into Management_Manage_Info(Admin_ID,Management_ID,Add_Time,Status)
  			values(#{adminId},#{managementID},now(),1)
  </insert>
  
  
  <resultMap id="GuaranteeInfoToRaiseCashRecords" type="cn.springmvc.model.InstitutionsRecordsEntity" >
  	 <result column="RealMoney" property="realAmount"/>
  	 <result column="amount" property="WithdrawalMoney"/>
  	 <result column="feeAmount" property="feeAmount"/>
  	 <result column="Receive_Date" property="dealTime"/>
  	 <result column="Mer_Billno" property="orderNumber"/>
  	 <result column="Third_Mer_Billno" property="loanNumber"/>
  	 <result column="Statu" property="statu"/>
  </resultMap>
  <!-- 分页查询担保机构充值、提现记录  memberType:0：会员 1：担保机构 2：平台  dealType:0：充值 1：提现 -->
  <select id="InstitutionsToRaiseCashRecords" resultMap="GuaranteeInfoToRaiseCashRecords" parameterType="product_p2p.kit.pageselect.PageEntity">
  	select 
		CAST(((AES_DECRYPT(UNHEX(Real_Money),#{map.skey}))) as signed) RealMoney,
		CAST(((AES_DECRYPT(UNHEX(Withdrawal_Money),#{map.skey}))) as signed) amount,
		CAST(((AES_DECRYPT(UNHEX(Third_Mng_Fee),#{map.skey}))) as signed)-CAST(((AES_DECRYPT(UNHEX(Mng_Fee_Repay),#{map.skey}))) as signed) feeAmount,
		Receive_Date,Mer_Billno,Third_Mer_Billno,Statu
 	from Member_Withdrawal_Recharge 
  	<where>
  		Member_Type = #{map.memberType} and
  		Deal_Type = #{map.dealType}
  		<if test="map.startdealTime!=null and map.startdealTime!=''">
  			and Receive_Date>=#{map.startdealTime}
  		</if>
  		<if test="map.enddealTime!=null and map.enddealTime!=''">
  			and #{map.enddealTime}>=Receive_Date
  		</if>
  		<if test="map.merBillno!=null and map.merBillno!=''">
  			and Mer_Billno like '%#{map.merBillno}%'
  		</if>
  		<if test="map.thirdMerBillno!=null and map.thirdMerBillno!=''">
  			and Third_Mer_Billno like '%#{map.thirdMerBillno}%'
  		</if>
  		<if test="map.statu!=-1">
  			and Statu = #{map.statu}
  		</if>
  	</where>
  	<!-- <if test="#{map.amountStatu}==1">
  		order by amount desc
  	</if>
  	<if test="#{map.amountStatu}==2">
  		order by amount asc
  	</if>
  	<if test="#{map.feeStatu}==1">
  		order by feeAmount desc
  	</if>
  	<if test="#{map.feeStatu}==2">
  		order by feeAmount asc
  	</if>
  	<if test="#{map.RealMoney}==1">
  		order by RealMoney desc
  	</if>
  	<if test="#{map.RealMoney}==2">
  		order by RealMoney asc
  	</if> -->
  </select>
  
  
  <!-- 查询担保机构银行卡信息 -->
<!--   <select id=""> -->
<!--   	 select mbc.Receive_Card,mbc.Bank_Card_Id, bci.Bank_No,bci.Bank_Phone,bci.Branch,bci.Branch_Address, -->
<!-- 	 bci.Bank_Id,bci.Card_Province,bci.Card_City,mbc.Bank_Card_Id -->
<!-- 	 from Member_Bank_Card mbc -->
<!-- 	 left join Bank_Card_Info bci on mbc.Bank_Card_Id= mbc.Bank_Card_Id -->
<!--   </select> -->
	
	<resultMap id="CompensationStatisticsEntity" type="cn.springmvc.model.CompensationStatisticsEntity" >
  	 <result column="dcje" property="totalCompensationAmount"/>
  	 <result column="dchkje" property="allCompensatoryPayment"/>
  	 <result column="cgdbbs" property="numberOfSuccessful"/>
  	 <result column="dcbs" property="successfulCompensation"/>
  	 <result column="dchkbs" property="compensatoryPaymentNumber"/>
  </resultMap>
	
	
	<!-- 查询担保机构代偿统计信息 -->
  	<select id="CompensationStatistics" parameterType="Map" resultMap="CompensationStatisticsEntity">
  		select (select 
  		SUM(
  		CAST(((AES_DECRYPT(UNHEX(Corpus_Enc),#{skey}))) as signed)+
  		CAST(((AES_DECRYPT(UNHEX(Interest_Enc),#{skey}))) as signed)+
  		CAST(((AES_DECRYPT(UNHEX(Overdue_Interest_Enc),#{skey}))) as signed)+
  		CAST(((AES_DECRYPT(UNHEX(Overdue_Fee_Enc),#{skey}))) as signed)
  		) 
  		from Instead_RePay_Record where Repay_Type= 0 and Guarantee_ID = #{GuaranteeID}) dcje,
  		(select SUM(
  		CAST(((AES_DECRYPT(UNHEX(Amount),#{skey}))) as signed)
  		)  from Member_Trading_Records where Member_Type=1 and Member_ID = #{GuaranteeID} and Trade_Type_Id=408) dchkje,
  		(select count(*) from Project_App_Record where Guarantee_ID = #{GuaranteeID} and Invest_Statu=4) cgdbbs,
  		(select count(*) from Instead_RePay_Record where Repay_Type= 0 and Guarantee_ID = #{GuaranteeID}) dcbs,
  		(select count(*) from Member_Trading_Records where Member_Type=1 and Member_ID = #{GuaranteeID} and Trade_Type_Id=408) dchkbs
  	</select>
  	
  	<resultMap type="cn.membermng.model.MemberThirdAuthInfoEntity" id="resultMemberThirdAuthInfoone">
        <id column="Account_Id"             property="accountId" />
		<result column="Open_Auto_Recharge" property="openAutoRecharge" />
		<result column="Is_Auto_Recharge"   property="isAutoRecharge" />
		<result column="Open_Auto_Pay"      property="openAutoPay" />
		<result column="Is_Auto_Pay"        property="isAutoPay" />
		<result column="Open_Auto_Invest"   property="openAutoInvest" />
		<result column="Is_Auto_Invest"     property="isAutoInvest" />
		<result column="Open_Second_Distribute" property="openSecondDistribute" /> 
	   <association property="memberThirdInfoEntity"  	resultMap="resultMemberThirdInfo"/>
    </resultMap>
  	<!-- 查询会员第三方账户信息 -->  
	<select id = "selectMemberTradeInfoone" parameterType = "Map"  resultMap = "resultMemberThirdAuthInfoone">
	 select ThirdParty_Account,ThirdParty_Mark,
     CAST((AES_DECRYPT(UNHEX(Frozen),#{skey})) as signed)  Frozen,
	 CAST((AES_DECRYPT(UNHEX(Gift_Frozen),#{skey})) as signed)	 Gift_Frozen,
	 CAST((AES_DECRYPT(UNHEX(User_Balance),#{skey})) as signed) as User_Balance,
	 CAST((AES_DECRYPT(UNHEX(Gift_User_Balance),#{skey})) as signed) as Gift_User_Balance,
	 Open_Auto_Recharge,Is_Auto_Recharge,
	 Open_Auto_Pay,Is_Auto_Pay,Open_Auto_Invest,Is_Auto_Invest,Open_Second_Distribute
	 from  Member_Third_Auth_Info mtai
	 left join Member_Third_Info mti on mtai.Account_Id=mti.Account_Id
	 where  Member_ID =#{GuaranteeID} and Member_Type =#{memberType}
    </select>  
    
    
    <!-- 查询逾期代偿列表 -->
    <select id="Overduecompensation" resultType="cn.springmvc.model.OverdueCompensationEntity" parameterType="product_p2p.kit.pageselect.PageEntity">
	select * from (SELECT par.Apply_Id applyId,par.Project_No projectNo,p.Project_Name,
		pbi.Project_Title projectTitle,lr.Indexs indexs,
		CONVERT((AES_DECRYPT(UNHEX(per.Personal_Name),#{map.skey})) using utf8) personalName,
		mi.Logname logname,
		CONVERT((AES_DECRYPT(UNHEX(per.Personal_Phone),#{map.skey})) using utf8) personalPhone,
		gi.Guarantee_Name guaranteeName,
		pbi.Real_Amount realAmount,lr.Repay_MaxTime repayMaxTime,
		CAST((AES_DECRYPT(UNHEX(lr.SDRepay_Principal),#{map.skey})) as signed) sDRepayPrincipal,
		CAST((AES_DECRYPT(UNHEX(lr.SDRepay_Interest),#{map.skey})) as signed) sDRepayInterest,
		p.Project_ID projectID,lr.IsCompensatory isCompensatory,
		lr.Repay_ID repayID,gi.Guarantee_ID guaranteeID
		 FROM Loan_Repay lr
		LEFT JOIN Project_App_Record par on par.Apply_Id = lr.Apply_Id
		LEFT JOIN Project_Base_Info  pbi ON pbi.Project_Base_ID = par.Project_Base_ID
		LEFT JOIN ProjectBaseInfo    p   ON p.Project_ID = par.Project_ID
		LEFT JOIN Member_Info				 mi  ON mi.Member_ID = par.Member_ID
		LEFT JOIN Personal_Base_Info per ON per.Personal_Id = mi.Personal_ID
		LEFT JOIN Guarantee_Info		 gi	 ON gi.Guarantee_ID = par.Guarantee_ID
		WHERE lr.Statu in (0,1)  AND lr.IsValid = 0 AND NOW()>lr.Repay_MaxTime)
		cc
		<where>
			<if test="map.projectNo != null and map.projectNo!=''">
			AND	projectNo like '%${map.projectNo}%'
			</if>
			<if test="map.projectID!=-1">
			AND	projectID = #{map.projectID}
			</if>
			<if test="map.projectTitle != null and map.projectTitle != ''">
			AND	projectTitle like '%${map.projectTitle}%'
			</if>
			<if test="map.logname != null and map.logname != ''">
			AND	logname like '%${map.logname}%'
			</if>
			<if test="map.personalPhone != null and map.personalPhone != ''">
			AND	personalPhone like '%${map.personalPhone}%'
			</if>
			<if test="map.personalName != null and map.personalName != ''">
			AND	personalName like '%${map.personalName}%'
			</if>
			<if test="map.guaranteeID!=-1">
			AND	guaranteeID = #{map.guaranteeID}
			</if>
			<if test="map.isCompensatory!=-1">
			AND	isCompensatory= #{map.isCompensatory}
			</if>
		</where>
    </select>
    
    
    
    
    
    
     <!-- 查询平台代偿记录列表 -->
    <select id="PtOverduecompensation" resultType="cn.springmvc.model.OverdueCompensationEntity" parameterType="product_p2p.kit.pageselect.PageEntity">
	select *,sDRepayPrincipal+sDRepayInterest+repayOverdueInterest+repayOverdue allmoney
	 from (SELECT par.Apply_Id applyId,par.Project_No projectNo,p.Project_Name,
		pbi.Project_Title projectTitle,lrp.Indexs indexs,
		CONVERT((AES_DECRYPT(UNHEX(per.Personal_Name),#{map.skey})) using utf8) personalName,
		mi.Logname logname,
		CONVERT((AES_DECRYPT(UNHEX(per.Personal_Phone),#{map.skey})) using utf8) personalPhone,
		gi.Guarantee_Name guaranteeName,
		pbi.Real_Amount realAmount,lr.Record_Date repayMaxTime,
		CAST((AES_DECRYPT(UNHEX(lr.Corpus_Enc),#{map.skey})) as signed) sDRepayPrincipal,
		CAST((AES_DECRYPT(UNHEX(lr.Interest_Enc),#{map.skey})) as signed) sDRepayInterest,
		CAST((AES_DECRYPT(UNHEX(lr.Overdue_Interest_Enc),#{map.skey})) as signed) repayOverdueInterest,
		CAST((AES_DECRYPT(UNHEX(lr.Overdue_Fee_Enc),#{map.skey})) as signed) repayOverdue,
		p.Project_ID projectID,lrp.IsCompensatory isCompensatory,
		lr.Repay_ID repayID,gi.Guarantee_ID guaranteeID
		 FROM Instead_RePay_Record lr
		 left join Loan_Repay lrp on lrp.Repay_ID = lr.Repay_ID
		LEFT JOIN Project_App_Record par on par.Apply_Id = lrp.Apply_Id
		LEFT JOIN Project_Base_Info  pbi ON pbi.Project_Base_ID = par.Project_Base_ID
		LEFT JOIN ProjectBaseInfo    p   ON p.Project_ID = par.Project_ID
		LEFT JOIN Member_Info				 mi  ON mi.Member_ID = par.Member_ID
		LEFT JOIN Personal_Base_Info per ON per.Personal_Id = mi.Personal_ID
		LEFT JOIN Guarantee_Info		 gi	 ON gi.Guarantee_ID = par.Guarantee_ID
		WHERE  lr.Repay_Type != 0 )
		cc
		<where>
			<if test="map.projectNo != null and map.projectNo!=''">
				projectNo like '%${map.projectNo}%'
			</if>
			<if test="map.projectID!=-1">
				projectID = #{map.projectID}
			</if>
			<if test="map.projectTitle != null and map.projectTitle != ''">
				projectTitle like '%${map.projectTitle}%'
			</if>
			<if test="map.logname != null and map.logname != ''">
				logname like '%${map.logname}%'
			</if>
			<if test="map.personalPhone != null and map.personalPhone != ''">
				personalPhone like '%${map.personalPhone}%'
			</if>
			<if test="map.personalName != null and map.personalName != ''">
				personalName like '%${map.personalName}%'
			</if>
			<if test="map.startTime != null and map.startTime != ''">
				repayMaxTime > #{map.startTime}
			</if>
			<if test="map.endTime != null and map.endTime != ''">
				 #{map.endTime} > repayMaxTime
			</if>
		</where>
    </select>
    
     <!-- 查询平台代偿回款记录列表 -->
    <select id="PaymentOverduecompensation" resultType="cn.springmvc.model.OverdueCompensationEntity" parameterType="product_p2p.kit.pageselect.PageEntity">
	select *
	 from (SELECT par.Apply_Id applyId,par.Project_No projectNo,p.Project_Name,
		pbi.Project_Title projectTitle,lrp.Indexs indexs,
		CONVERT((AES_DECRYPT(UNHEX(per.Personal_Name),#{map.skey})) using utf8) personalName,
		mi.Logname logname,
		CONVERT((AES_DECRYPT(UNHEX(per.Personal_Phone),#{map.skey})) using utf8) personalPhone,
		gi.Guarantee_Name guaranteeName,
		pbi.Real_Amount realAmount,lr.Record_Date repayMaxTime,
		CAST((AES_DECRYPT(UNHEX(otr.Amount),#{map.skey})) as signed) allmoney,
		p.Project_ID projectID,otr.Record_Date paymentTime,
		lr.Repay_ID repayID,gi.Guarantee_ID guaranteeID
		 FROM Instead_RePay_Record lr
		 left join Loan_Repay lrp on lrp.Repay_ID = lr.Repay_ID
		 left join Own_Trading_Records otr on otr.Project_ID = lr.Repay_ID
		LEFT JOIN Project_App_Record par on par.Apply_Id = lrp.Apply_Id
		LEFT JOIN Project_Base_Info  pbi ON pbi.Project_Base_ID = par.Project_Base_ID
		LEFT JOIN ProjectBaseInfo    p   ON p.Project_ID = par.Project_ID
		LEFT JOIN Member_Info				 mi  ON mi.Member_ID = par.Member_ID
		LEFT JOIN Personal_Base_Info per ON per.Personal_Id = mi.Personal_ID
		LEFT JOIN Guarantee_Info		 gi	 ON gi.Guarantee_ID = par.Guarantee_ID
		WHERE  otr.Own_Trading_ID > 0 )
		cc
		<where>
			<if test="map.projectNo != null and map.projectNo!=''">
				projectNo like '%${map.projectNo}%'
			</if>
			<if test="map.projectID!=-1">
				projectID = #{map.projectID}
			</if>
			<if test="map.projectTitle != null and map.projectTitle != ''">
				projectTitle like '%${map.projectTitle}%'
			</if>
			<if test="map.logname != null and map.logname != ''">
				logname like '%${map.logname}%'
			</if>
			<if test="map.personalPhone != null and map.personalPhone != ''">
				personalPhone like '%${map.personalPhone}%'
			</if>
			<if test="map.personalName != null and map.personalName != ''">
				personalName like '%${map.personalName}%'
			</if>
			<if test="map.startTime != null and map.startTime != ''">
				repayMaxTime > #{map.startTime}
			</if>
			<if test="map.endTime != null and map.endTime != ''">
				 #{map.endTime} > repayMaxTime
			</if>
			
			<if test="map.startpaymentTime != null and map.startpaymentTime != ''">
				paymentTime > #{map.startpaymentTime}
			</if>
			<if test="map.endpaymentTime != null and map.endpaymentTime != ''">
				 #{map.endpaymentTime} > endpaymentTime
			</if>
		</where>
    </select>
    
    <!-- 查询担保机构银行卡信息 -->
    <select id="findbankcardforguaranteeID" resultType="cn.springmvc.model.GuaranteeBankCard" parameterType="product_p2p.kit.pageselect.PageEntity">
    	SELECT mbc.Bank_Card_Id bankCardId,
    	bci.Branch bankBranch,bci.Bank_No bankNo,bi.BankName bankName,cd.City_Name bankCity FROM Member_Bank_Card mbc
			LEFT JOIN Bank_Card_Info bci ON bci.Bank_Card_Id = mbc.Bank_Card_Id
			LEFT JOIN Bank_Info bi ON bi.Bank_ID = bci.Bank_Id
			LEFT JOIN City_Dictionary cd on cd.City_Id = bci.Card_City
			WHERE mbc.Member_Type = #{map.memberType}  
			<if test="map.guaranteeID != -1">
				AND Member_ID = #{map.guaranteeID}
			</if>
			
    </select>
</mapper>