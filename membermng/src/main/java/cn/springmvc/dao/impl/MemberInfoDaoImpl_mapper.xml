<?xml version="1.0" encoding="UTF-8"?>    
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">     

<mapper namespace="memberInfoDaoImpl">     
	
	<!-- 查询结果封装 -->
	<resultMap 	type="cn.membermng.model.MemberInfo" 	id="memberInfoResult">
		<id		column="ID"								property="id"			/>
		<result	column="Member_Type"					property="memberType"	/>
		<result	column="Member_No"						property="memberNo"		/>
		<result	column="Logname"						property="logname"		/>
		<result	column="Member_Pwd"						property="memberPwd"	/>
		<result	column="Safe_Pwd"						property="safePwd"		/>
		<result	column="Company_ID"						property="companyId"	/>
		<result	column="Personal_ID"					property="personalId"	/>
		<result	column="Path"							property="path"			/>
		<result	column="Reg_Date"						property="regDate"		/>
		<result	column="InvitateCode"					property="invitateCode"	/>
		<result	column="BeinvitateCode"					property="beinvitateCode"/>
		<result	column="Province_Id"					property="provinceId"	/>
		<result	column="City_Id"						property="cityId"		/>
		<result	column="County_Id"						property="countyId"		/>
		<result	column="Town_Id"						property="townId"		/>
		<result	column="Integral"						property="integral"		/>
		<result	column="Credit_Integral"				property="creditIntegral"/>
	</resultMap>	
	
	
	<!-- 注册个人会员 -->
	<select id="individualMember" statementType="CALLABLE" parameterType="Map">
		call individualMember(
			#{skey,					mode=IN,					jdbcType=VARCHAR},
			#{mid,					mode=IN,					jdbcType=BIGINT},
			#{memberNo,				mode=IN,					jdbcType=VARCHAR},
			#{memberType,			mode=IN,					jdbcType=INTEGER},
			#{lognName,				mode=IN,					jdbcType=VARCHAR},
			#{personalPhone,		mode=IN,					jdbcType=VARCHAR},
			#{personalPwd,			mode=IN,					jdbcType=VARCHAR},
			#{beinvitateCode,		mode=IN,					jdbcType=VARCHAR},
			#{invitateCode,			mode=IN,					jdbcType=VARCHAR},
			#{result,				mode=OUT,					jdbcType=INTEGER}
		)
	</select>
	
	<!-- 会员登录 -->
	<select id="login" statementType="CALLABLE" parameterType="Map">
		call memberLogin(
			#{skey,					mode=IN,					jdbcType=VARCHAR},
			#{userName,				mode=IN,					jdbcType=VARCHAR},
			#{userPwd,				mode=IN,					jdbcType=VARCHAR},
			#{userType,				mode=IN,					jdbcType=INTEGER},
			#{ipaddress,			mode=IN,					jdbcType=VARCHAR},
			#{scountry,				mode=IN,					jdbcType=VARCHAR},
			#{sregion,				mode=IN,					jdbcType=VARCHAR},
			#{sprovince,			mode=IN,					jdbcType=VARCHAR},
			#{scity,				mode=IN,					jdbcType=VARCHAR},
			#{sarea,				mode=IN,					jdbcType=VARCHAR},	
			#{ISP,					mode=IN,					jdbcType=VARCHAR},
			#{sourceUrl,			mode=IN,					jdbcType=VARCHAR},
			#{sessionId,			mode=IN,					jdbcType=VARCHAR},
			#{result,				mode=OUT,					jdbcType=VARCHAR}	
		)
	</select>
	
	
	<resultMap type="cn.membermng.model.MemberInfo" id="loginMemberInfo">
		<id		column="id"				property="id"/>
		<result	column="memberType"		property="memberType"/>
		<result	column="personalId"		property="personalId"/>
		<result	column="Personal_Name"	property="personalBaseInfo.personalName"/>
		<result	column="Personal_Phone"	property="personalBaseInfo.personalPhone"/>
		<result column="Compang_Name"	property="companyInfo.compangName"/>
		<result column="Logname"	property="logname"/>
	</resultMap>
	<!-- 获取会员信息 -->
	<select id="findMemberInfoByParam" parameterType="Map" resultMap="loginMemberInfo">
		select 
		Member_Id as id,
		Member_Type as memberType,
		pbi.Personal_ID as personalId,
		mi.Logname,
		CONVERT(AES_DECRYPT(UNHEX(pbi.Personal_Name),#{skey}) using utf8) as Personal_Name,
		CONVERT(AES_DECRYPT(UNHEX(ci.Compang_Name),#{skey}) using utf8) as Compang_Name,
		CONVERT(AES_DECRYPT(UNHEX(pbi.Personal_Phone),#{skey}) using utf8) as Personal_Phone
		from member_info mi 
		left join Personal_Base_Info pbi on pbi.Personal_ID = mi.Personal_ID
		left join company_info ci on ci.Company_ID = mi.Company_ID
		where mi.Member_Pwd = #{memberPwd} 
		and (pbi.Personal_Phone = HEX(AES_ENCRYPT(#{logName} ,#{skey})) or Logname = #{logName})
		and member_Type = #{memberType}
	</select>
	
	
	<!-- 统计当前电话号码的个数 -->
	<select id="countPhone" parameterType="Map" resultType="Integer">
		select count(1) from Member_Info mi left join Personal_Base_Info pbi on pbi.Personal_ID = mi.Personal_ID where pbi.Personal_Phone = HEX(AES_ENCRYPT(#{phone},#{skey}));
	</select>
	
	
	<!-- 统计当前邮箱的个数 -->
	<select id="countEmail" parameterType="Map" resultType="Integer">
		select count(1) from Member_Info mi left join Personal_Base_Info pbi on pbi.Personal_ID = mi.Personal_ID where pbi.Personal_Email = HEX(AES_ENCRYPT(#{email},#{skey}));
	</select>
	
	<!-- 统计会员名称的个数 -->
	<select id="countName" parameterType="String" resultType="Integer">
		select count(1) from Member_Info mi where mi.Logname = #{userName}
	</select>
	
	
	<!-- 统计邀请码的个数 -->
	<select id="countInvitateCode" parameterType="String" resultType="Integer">
		select count(1) from Member_Info mi where mi.InvitateCode = #{invitateCode}
	</select>
	
	
	
	<!-- 个人会员信息 -->
	<resultMap type="cn.membermng.model.MemberInfo" id="memberPersonalInfo">
		<id column="member_id"				property="id"/>
		<result	column="Personal_Name"		property="baseInfo.personalName"/>
		<result	column="Nation_Id"			property="baseInfo.nationId"/>
		<result	column="nationName"			property="baseInfo.nationName"/>
		<result	column="SexID"				property="baseInfo.sexId"/>
		<result	column="Personal_IDCard"	property="baseInfo.personalIDCard"/>
		<result	column="Education"			property="baseInfo.education"/>
		<result	column="Marital_Status"		property="baseInfo.maritalStatus"/>
		<result	column="Personal_Phone"		property="baseInfo.personalPhone"/>
		<result	column="QQ"					property="baseInfo.qq"/>
		<result	column="Personal_Email"		property="baseInfo.personalEmail"/>
		<result	column="Census"				property="baseInfo.census"/>
		<result	column="House_Address"		property="baseInfo.houseAddress"/>
		<result	column="Province_Id"		property="provinceId"/>
		<result	column="City_Id"			property="cityId"/>
		<result	column="County_Id"			property="countyId"/>
		<result	column="Town_Id"			property="townId"/>
		<result	column="Province_Name"		property="provinceName"/>
		<result	column="City_Name"			property="cityName"/>
		<result	column="County_Name"		property="countyName"/>
		<result	column="Town_Name"			property="townName"/>
	</resultMap>
	<!-- 获取个人会员信息 -->
	<select id="memberPersonalInfo" parameterType="Map" resultMap="memberPersonalInfo">
		select 
		mi.member_id,
		CONVERT(AES_DECRYPT(UNHEX(pbi.Personal_Name),	#{skey}) using utf8) as Personal_Name,
		(select NationName from Nation_Info ni where ni.Nation_Id = pbi.Nation_Id) as nationName,
		pbi.Nation_Id,
		pbi.SexID,
		CONVERT(AES_DECRYPT(UNHEX(pbi.Personal_IDCard),	#{skey}) using utf8) as Personal_IDCard,
		pbi.Education,
		pbi.Marital_Status,
		CONVERT(AES_DECRYPT(UNHEX(pbi.Personal_Phone),	#{skey}) using utf8) as Personal_Phone,
		CONVERT(AES_DECRYPT(UNHEX(pbi.QQ),				#{skey}) using utf8) as QQ,
		CONVERT(AES_DECRYPT(UNHEX(pbi.Personal_Email),	#{skey}) using utf8) as Personal_Email,
		CONVERT(AES_DECRYPT(UNHEX(pbi.Home_Town),		#{skey}) using utf8) as Census,
		CONVERT(AES_DECRYPT(UNHEX(pbi.House_Address),	#{skey}) using utf8) as House_Address,
		mi.Province_Id,
		mi.City_Id,
		mi.County_Id,
		mi.Town_Id,
		pd.Province_Name,
		cd.City_Name,
		cod.County_Name,
		td.Town_Name
		from Member_Info mi
		left join Personal_Base_Info 	pbi on mi.Personal_ID 	= pbi.Personal_Id
		left join Province_Dictionary 	pd 	on mi.Province_Id 	= pd.province_Id
		left join City_Dictionary 		cd 	on cd.City_id 		= mi.City_id
		left join County_Dictionary 	cod on cod.County_Id 	= mi.County_Id
		left join Town_Dictionary 		td 	on td.Town_id 		= mi.Town_id
		where mi.member_id = #{memberId} and mi.member_Type = 0
	</select>
	
	<!-- 企业会员信息 -->
	<resultMap type="cn.membermng.model.MemberInfo" id="memberComplanyInfo">
		<id		column="Company_ID" 		property="id"/>
		<result	column="Compang_Name"		property="companyInfo.compangName"/>
		<result	column="Companye_BLN"		property="companyInfo.companyeBLN"/>
		<result	column="Company_Address"	property="companyInfo.companyAddress"/>
		<result column="Personal_Name2"		property="companyInfo.baseInfo.personalName"/>
		<result	column="Personal_IDCard"	property="companyInfo.baseInfo.personalIDCard"/>
		<result	column="Company_OC"			property="companyInfo.companyOC"/>
		<result	column="Tax_RegNo"			property="companyInfo.taxRegNo"/>
		<result	column="Company_Business"	property="companyInfo.companyBusiness"/>
		<result	column="Establishments"		property="companyInfo.establishments"/>
		<result	column="Company_Source"		property="companyInfo.companySource"/>
		<result	column="Company_Capital"	property="companyInfo.companyCapital"/>
		<result column="Company_Profile"	property="companyInfo.companyProfile"/>
		<result column="Personal_Name"		property="baseInfo.personalName"/>
		<result	column="Personal_Phone"		property="baseInfo.personalPhone"/>
		<result	column="QQ"					property="baseInfo.qq"/>
		<result	column="Personal_Email"		property="baseInfo.personalEmail"/>
		<result	column="Province_Name"		property="provinceName"/>
		<result column="City_Name"			property="cityName"/>
		<result	column="County_Name"		property="countyName"/>
		<result column="Town_Name"			property="townName"/>
	</resultMap>
	<!-- 获取企业会员信息 -->
	<select id="memberComplanyInfo" parameterType="Map" resultMap="memberComplanyInfo">
		select 
		ci.Company_ID,
		ci.Compang_Name,
		ci.Companye_BLN,
		ci.Company_Address,
		CONVERT(AES_DECRYPT(UNHEX(pbi2.Personal_Name),#{skey}) using utf8) as Personal_Name2,
		CONVERT(AES_DECRYPT(UNHEX(pbi2.Personal_IDCard),#{skey}) using utf8) as Personal_IDCard,
		CONVERT(AES_DECRYPT(UNHEX(ci.Company_OC),#{skey}) using utf8) as Company_OC,
		CONVERT(AES_DECRYPT(UNHEX(ci.Tax_RegNo),#{skey}) using utf8) as Tax_RegNo,
		ci.Company_Business,
		ci.Establishments,
		ci.Company_Source,
		ci.Company_Capital,
		ci.Company_Profile,
		CONVERT(AES_DECRYPT(UNHEX(pbi.Personal_Name),#{skey}) using utf8) as Personal_Name, 
		CONVERT(AES_DECRYPT(UNHEX(pbi.Personal_Phone),#{skey}) using utf8) as Personal_Phone,
		CONVERT(AES_DECRYPT(UNHEX(pbi.QQ),#{skey}) using utf8) as QQ,
		CONVERT(AES_DECRYPT(UNHEX(pbi.Personal_Email),#{skey}) using utf8) as Personal_Email,
		mi.Province_Id,
		mi.City_Id,
		mi.County_Id,
		mi.Town_Id,
		pd.Province_Name,
		cd.City_Name,
		cod.County_Name,
		td.Town_Name
		from Member_Info mi
		left join Company_Info ci on ci.Company_ID = mi.Company_ID
		left join Personal_Base_Info pbi on pbi.Personal_Id = mi.Personal_ID
		left join Personal_Base_Info pbi2 on pbi2.Personal_Id = ci.Legal_ID
		left join Province_Dictionary 	pd 	on mi.Province_Id = pd.province_Id
		left join City_Dictionary 		cd 	on	cd.City_id = mi.City_id
		left join County_Dictionary 	cod on cod.County_Id = mi.County_Id
		left join Town_Dictionary 		td 	on td.Town_id = mi.Town_id
		where mi.member_id = #{memberId} and mi.member_Type = 1	
	</select>
	
	
	
	<!-- 修改个人会员信息 -->
	<select id="editMemberPersonalInfo" statementType="CALLABLE" parameterType="Map">
		call editMemberPersonalInfo(
			#{memberId,					mode=IN,			jdbcType=BIGINT},
			#{sexId,					mode=IN,			jdbcType=INTEGER},
			#{qqNumber,					mode=IN,			jdbcType=VARCHAR},
			#{address,					mode=IN,			jdbcType=VARCHAR},
			#{homeTown,					mode=IN,			jdbcType=VARCHAR},
			#{provinceId,				mode=IN,			jdbcType=INTEGER},
			#{cityId,					mode=IN,			jdbcType=INTEGER},
			#{countyId,					mode=IN,			jdbcType=INTEGER},
			#{skey,						mode=IN,			jdbcType=VARCHAR},
			#{result,					mode=OUT,			jdbcType=INTEGER}
		)
	</select>
	
	<!-- 修改企业会员信息 -->
	<select id="editMemberComplanyInfo" statementType="CALLABLE" parameterType="Map">
		call editMemberComplanyInfo(
			#{memberId,					mode=IN,			jdbcType=BIGINT},
			#{provinceId,				mode=IN,			jdbcType=INTEGER},
			#{cityId,					mode=IN,			jdbcType=INTEGER},
			#{countyId,					mode=IN,			jdbcType=INTEGER},
			#{contactsName,				mode=IN,			jdbcType=VARCHAR},
			#{contactsQQ,				mode=IN,			jdbcType=VARCHAR},
			#{companyProfile,			mode=IN,			jdbcType=VARCHAR},
			#{skey,						mode=IN,			jdbcType=VARCHAR},
			#{result,					mode=OUT,			jdbcType=INTEGER}
		)
	</select>
	
	
	<resultMap type="cn.membermng.model.MemberInfo" id="friendInvitation">
		<result	column="Logname"			property="logname"/>
		<result	column="Personal_Phone"		property="baseInfo.personalPhone"/>
		<result	column="Reg_Date"			property="regDate"/>
		<result	column="Record_Date"		property="recordDate"/>
	</resultMap>
	
	
	<!-- 会员邀请列表 -->
	<select id="friendInvitation" parameterType="product_p2p.kit.pageselect.PageEntity" resultMap="friendInvitation">
		select Logname,CONVERT(AES_DECRYPT(UNHEX(Personal_Phone),#{map.skey}) USING utf8) AS Personal_Phone,Reg_Date,mti.Record_Date
		from member_info mi
		left join personal_base_info pbi on pbi.Personal_Id = mi.Personal_ID
		left join Member_Third_Info mti on mti.Member_ID = mi.Member_ID and mti.Member_Type = mi.Member_Type
		where BeinvitateCode = (select InvitateCode from member_info where member_id = #{map.memberId} and member_type = #{map.memberType})
	</select>
	
	
	<!-- 好友列表 -->
	<select id="friendList" parameterType="product_p2p.kit.pageselect.PageEntity" resultType="cn.membermng.model.Friends">
		SELECT  mi.Logname AS username ,f.friendId, DATE_FORMAT(f.addTime,'%Y-%m-%d %H:%i') as addTime  FROM Member_Info mi INNER JOIN (
			SELECT Member_ID_Receive AS friendId,Check_Date AS addTime FROM Member_FriendShip_Record WHERE Member_ID_Apply=#{map.memberId} AND Statu=1 AND Relieve_Statu=0
			UNION ALL SELECT Member_ID_Apply,Check_Date FROM Member_FriendShip_Record WHERE Member_ID_Receive=#{map.memberId} AND Statu=1 AND Relieve_Statu=0
		) AS f ON mi.Member_ID = f.friendId
		LEFT JOIN personal_base_info pbi ON pbi.Personal_Id = mi.Personal_ID
	</select>
	
	<!-- 待确认好友列表 -->
	<select id="selectConfirmFriendList" parameterType="product_p2p.kit.pageselect.PageEntity" resultType="cn.membermng.model.Friends">
		
		SELECT   mi.Logname AS username,
		f.friendId,f.addTime,f.statu,f.type FROM Member_Info mi INNER JOIN
		 (
		 	<!-- 我想加的 -->
			SELECT Member_ID_Receive AS friendId, DATE_FORMAT(Record_Date,'%Y-%m-%d %H:%i') AS addTime,statu as statu ,1 as type 
			FROM Member_FriendShip_Record 
			WHERE Member_ID_Apply=#{map.memberId} AND statu in (-1,0) 
			
			<!-- 想加我的 -->
			UNION ALL 
			
			SELECT Member_ID_Apply,Record_Date,statu,0 
			FROM Member_FriendShip_Record 
			WHERE Member_ID_Receive=#{map.memberId} AND statu=0 
		) AS f ON mi.Member_ID = f.friendId
		LEFT JOIN personal_base_info pbi ON pbi.Personal_Id = mi.Personal_ID
		order by f.type desc
	</select>
	
	
	
	<!-- 会员获取积分记录 -->
	<select id="addPoints" parameterType="product_p2p.kit.pageselect.PageEntity" resultType="cn.membermng.model.IntegralGETRecord">
		select
		quantity,
		(select name1 from dict where tcode='DICT_JFLX' and code1 = ir.Integral_Type) as pointName,
		ir.Record_Time as dateTime,
		Integral_Residue as availableIntegral
		from Integral_Records ir 
		where Member_ID = #{map.memberId} order by Record_Time desc
	</select>
	
	
	<!-- 会员积分信息 -->
	<select id="points" parameterType="Map" resultType="cn.membermng.model.MyPoint">
		select 
		ifnull((select sum(Quantity) from Integral_Records where Integral_Direction = 1 and member_id = mi.Member_ID),0) as cumulativeIntegral,
		ifnull(mi.Integral,0) as availableIntegral,
		ifnull((select sum(Quantity) from Integral_Records where Integral_Direction = -1 and member_id = mi.Member_ID),0) as usedIntegral
		from member_info mi where mi.member_id = #{memberId} and member_Type = #{memberType}
	</select>
	
	
	<!-- 会员积分使用记录 -->
	<select id="rePoints" parameterType="product_p2p.kit.pageselect.PageEntity" resultType="cn.membermng.model.ExchangeRecords">
		select 
			ir.Quantity	as 				points,
			(select name1 from dict where tcode ='DICT_DHLX' and code1 = orr.Exchange_Type)		as	eTypeName,
			(select Commodity_Name from Commodity_Info where Commodity_ID = co.Commodity_ID)	as	goodName,
			co.Quantity as numbers,
			orr.Exchange_Time as eTime,
			orr.Receive_Time as confirm,
			orr.Order_Type as eType,
			orr.order_id as eId,
			(select name1 from dict where tcode='DICT_DDZT' and Order_Type = code1) as statusName 
		from Integral_Records ir
		left join Order_Records 	orr on orr.Order_ID = ir.Integral_Event_ID
		left join Commodity_Order	co 	on co.Order_ID 	= orr.Order_ID
		where Integral_Type = 5 and ir.Member_ID = #{map.memberId} order by Exchange_Time desc
	</select>
	
	
	
	<!-- 我的红包 -->
	<select id="myRedPackage" parameterType="Map" resultType="cn.membermng.model.MyRedPackage">
		select 
		IFNULL((select sum(Gift_Amount) from Member_Redpackets where member_id = mi.member_id),0) as redPackageSum,
		IFNULL((select sum(Gift_Amount) from Member_Redpackets where member_id = mi.member_id and End_Date > now()),0) as expiredSum,
		IFNULL((select sum(mru.Gift_Amount) from Member_Redpackets_UseRecord mru left join Member_Redpackets mr on mr.Member_RP_ID = mru.Member_RP_ID where member_id = mi.member_id ),0) as useRedPackageSum 
		from Member_Info mi where mi.member_id = #{memberId}
	</select>
	
	
	<!-- 红包记录 -->
	<resultMap type="cn.membermng.model.RadPackage" id="redPackage">
		<id		column="Member_RP_ID"			property="memberRpId"/>
		<result	column="Gift_Amount"			property="giftAmount"/>
		<result	column="Gift_Type"				property="giftType"/>
		<result	column="typeName"				property="gifTypeName"/>
		<result	column="Receive_Date"			property="receiveDate"/>
		<result	column="Statu"					property="statu"/>
		<result column="statusName"				property="statuName"/>
		<result	column="Invest_Date"			property="useDate"/>
	</resultMap>
	<select id="redPackages" parameterType="product_p2p.kit.pageselect.PageEntity" resultMap="redPackage">
		select 
		mr.Gift_Amount,
		mr.Gift_Type,
		(select name1 from dict where tcode = 'DICT_HBLX' and code1 = mr.Gift_Type) as typeName,
		mr.Receive_Date,
		mr.End_Date,
		mr.Statu,
		(select name1 from dict where tcode = 'DICT_HBSYZT' and code1 = mr.statu) as statusName,
		ir.Invest_Date
		from Member_Redpackets mr
		left join Member_Redpackets_UseRecord mru on mru.Member_RP_ID = mr.Member_RP_ID
		left join Invest_Record ir on ir.Invest_Id = mru.Invest_Id 
		where mr.Member_ID = #{map.memberId}
	</select>
	
	
	<!--  获取我的代金券信息 -->
	<select id="myVouchers" parameterType="Map" resultType="cn.membermng.model.MemberVouchers">
		select IFNULL(sum(Gift_Amount),0) as sGiftAmount from Member_Vouchers where Member_ID = #{memberId}
	</select>
	
	<!-- 获取我的代金券获取记录 -->
	<select id="vouchers" parameterType="product_p2p.kit.pageselect.PageEntity" resultType="cn.membermng.model.MemberVouchers">
		select 
		Gift_Amount 	as sgiftAmount,
		Gift_Type 		as giftType,
		Receive_Date 	as receiveDate 
		from Member_Vouchers where Member_ID = #{map.memberId}
	</select>
	
	
	<!-- 获取我的账户总额 -->
	<select id="getRemainderTotal" statementType="CALLABLE" parameterType="Map">
		call GetRemainderTotal(
			#{memberId,					mode=IN,				jdbcType=BIGINT},
			#{sKey,						mode=IN,				jdbcType=VARCHAR},
			#{result,					mode=OUT,				jdbcType=BIGINT}
		)
	</select>
	
	
	<!-- 获取我的代金券使用记录 -->
	<select id="addMyVouchers" parameterType="product_p2p.kit.pageselect.PageEntity" resultType="cn.membermng.model.MemberVouchers">
		SELECT
			Invest_Date	as useDate,
			CAST(AES_DECRYPT(UNHEX(Invest_Vouchers_Amount),#{map.skey}) AS SIGNED) AS giftAmount,
			par.Invest_Statu AS pStatus,
			cta.Statu AS ctaStatus
		FROM Invest_Record ir 
		LEFT JOIN Project_App_Record par ON par.Apply_Id = ir .Apply_Id
		LEFT JOIN Creditor_Trans ct ON ct.Invest_Id = ir.Invest_Id
		LEFT JOIN Creditor_Trans_App cta ON cta.CTA_Id = ct.CTA_Id
		where ir.member_id = #{map.memberId}
	</select>
	
	
	<!-- 获取安全中心认证信息 -->
	<select id="securityInfo"	parameterType="Map" resultType="cn.membermng.model.SecurityInfo">
		select 
		(select ThirdParty_Account from Member_Third_Info mti 
			where mti.Member_ID = mi.member_id and mti.Member_Type = mi.Member_Type
		) as thirdPartyAccount,
		(select 
			CONVERT(AES_DECRYPT(UNHEX(Personal_Phone),#{skey}) using utf8) from Personal_Base_Info pbi where pbi.Personal_Id = mi.Personal_Id
		) as personalPhone,
		(select 
			CONVERT(AES_DECRYPT(UNHEX(Personal_Email),#{skey}) using utf8) from Personal_Base_Info pbi where pbi.Personal_Id = mi.Personal_Id
		) as personalEmail,
		(select 
			Open_Second_Distribute from Member_Third_Info mti left join Member_Third_Auth_Info mtai on mtai.Account_Id = mti.Account_Id where mti.Member_Id = #{memberId}
		) as openSecondDistribute
		from member_info mi 
		where mi.member_id = #{memberId} 
		and mi.member_type = #{memberType}
	</select>
	
	<!-- 查询陌生人 -->
	<select id="serachMemberByParam" parameterType="product_p2p.kit.pageselect.PageEntity" resultType="cn.membermng.model.MemberInfo">
		select mi.member_id as memberId,mi.Path,mi.Logname,pbi.Personal_Name, CONCAT(SUBSTRING(CONVERT(AES_DECRYPT(UNHEX(pbi.Personal_Phone),#{map.sKey}) using utf8),1,3),'****',SUBSTRING(CONVERT(AES_DECRYPT(UNHEX(pbi.Personal_Phone),#{map.sKey}) using utf8),10,11)) as personalPhone
		from member_info mi 
		left join personal_base_info pbi on pbi.Personal_Id = mi.Personal_ID
		where 	mi.Logname	like '${map.memberName}%' 
		or	 	CONVERT(AES_DECRYPT(UNHEX(pbi.Personal_Name),#{map.sKey}) using utf8) 	like '${map.memberName}%'
		or	 	CONVERT(AES_DECRYPT(UNHEX(pbi.Personal_Phone),#{map.sKey}) using utf8) 	like '${map.memberName}%'	
	</select>
	
	<!-- 个人首页-基本信息查询 -->
	<select id="loadMemberInfo" parameterType="Map" resultType="cn.membermng.model.MemberInfo">
	SELECT
		mi.logName AS logname,
		mi.Integral AS integral,
		mti.ThirdParty_Account AS thirdPartyAccount,
		<if test="memberType==0">
		pbi.Personal_Phone AS personalPhone,
		pbi.Personal_Email AS personalEmail,
		Personal_IDCard AS personalIdCard,
		</if>
		(SELECT COUNT(1) FROM Member_Sign_Record msr WHERE msr.Member_ID=#{memberId}) AS recordNum,
		(SELECT ml.Level_Mark FROM member_level ml WHERE mi.Integral >= ml.Score_Min ORDER BY ml.Score_min ASC LIMIT 1) AS integralLevelName,
		(SELECT cl.Level_Mark FROM Credit_Level cl WHERE mi.Credit_Integral>=cl.Credit_Score_Min ORDER BY cl.Credit_Score_Min ASC LIMIT 1) AS creditLevelName
	FROM member_info mi
	LEFT JOIN member_third_info mti ON mi.Member_ID=mti.Member_ID
	<if test="memberType==0">
	LEFT JOIN Personal_Base_Info pbi ON mi.Personal_ID=pbi.Personal_ID
	</if>
	WHERE mi.member_id = #{memberId}
	</select>
	
	<!-- 查询今日是否已经签到 -->
	<select id="checkTodaySignNum" parameterType="Map" resultType="int">
		SELECT COUNT(*) FROM Member_Sign_Record msr WHERE msr.Member_ID=#{memberId} and DATE(msr.Record_Date)=CURDATE() 
	</select>
	
	<select id="loadUntreatedMessage" parameterType="Map" resultType="cn.membermng.model.UntreatedMessageEntity">
	SELECT
		(SELECT COUNT(*) FROM Member_MsgRecord msr WHERE msr.member_ID=1 AND msr.Msg_Type =#{memberId} AND msr.Read_Statu=0 AND msr.statu=0) AS stationMessageNum,
		(SELECT COUNT(*) FROM Member_Station_Letter msl WHERE msl.Member_ID_Rec=#{memberId} AND msl.Is_Read=0) AS letterNum,
		(SELECT COUNT(*) FROM Member_FriendShip_Record mfr WHERE mfr.Member_ID_Receive=#{memberId} AND mfr.Statu=0) AS applicationFriendNum
	FROM DUAL
	</select>
	
	
	<!--  忘记密码-查询登录名与手机号是否匹配 -->
	<select id="selectMemberIsExist"  parameterType="Map" resultType="int">
		SELECT COUNT(*) FROM member_info mi INNER JOIN Personal_Base_Info pbi 
		ON mi.Personal_Id=pbi.Personal_Id WHERE mi.Logname=#{loginName} AND pbi.Personal_Phone=HEX(AES_ENCRYPT(#{phone},#{skey}))
	</select>
	
	<!-- 忘记密码-根据手机号查询用户ID -->
	<select id="selectMemberIdByPhone"  parameterType="Map" resultType="long">
		SELECT mi.Member_ID FROM member_info mi INNER JOIN Personal_Base_Info pbi 
		ON mi.Personal_Id=pbi.Personal_Id WHERE pbi.Personal_Phone=HEX(AES_ENCRYPT(#{phone},#{skey}))
	</select>
	
	<!-- 添加好友 -->
	<select id="applyAddFriends" statementType="CALLABLE" parameterType="Map" >
		call applyAddFriends(
			#{myId,					mode=IN,			jdbcType=BIGINT},
			#{fId,					mode=IN,			jdbcType=BIGINT},
			#{result,				mode=OUT,			jdbcType=INTEGER}
		)
	</select>
	
	<!-- 同意好友申请 -->
	<select id="agreeAapplyForFriend" statementType="CALLABLE" parameterType="Map" >
		call agreeAapplyForFriend(
			#{myId,					mode=IN,			jdbcType=BIGINT},
			#{fId,					mode=IN,			jdbcType=BIGINT},
			#{result,				mode=OUT,			jdbcType=INTEGER}
		)
	</select>
	
	
	<!-- 确认收货 -->
	<select id="confirmReceipt" statementType="CALLABLE" parameterType="Map">
		call confirmReceipt(
			#{memberId,				mode=IN,			jdbcType=BIGINT},
			#{eId,					mode=IN,			jdbcType=BIGINT}
		)
	</select>
	
	<insert id="sign" parameterType="Map" >
		insert into 
		Member_Sign_Record(Member_ID	,Record_Date,Get_Integral)
		VALUES(#{memberId},now(),(select sign_points from manager_regpoints_rule limit 1))
	</insert>
	
	
	<!-- 查询注册协议 -->
	<select id="agreement" resultType="cn.membermng.model.Agreement">
		SELECT 
			Agreement_Type		agreementType,
			Agreement_Detail	agreementDetail,
			Agreement_Statu		agreementStatu,
			Agreement_Title 	agreementTitle
		FROM System_Agreement_Set WHERE Agreement_Type = 0 AND Agreement_Statu = 1		
	</select>
	
	<!-- 测试事物 -->
	<select id="testTransaction" parameterType="map" statementType="CALLABLE">
		call addTestTransaction(
			#{userName,				mode=IN,			jdbcType=VARCHAR},
			#{userAge,				mode=IN,			jdbcType=INTEGER},
			#{result,				mode=OUT,			jdbcType=INTEGER}
		)
	</select>
	
	
	<!-- 获取会员第三方授权信息 -->
	<select id="getAutoGiroStatu" parameterType="Map" resultType="cn.membermng.model.MemberThirdAuthInfo">
		select 
			mtai.Account_Id					as accountId,
			Open_Auto_Recharge				as openAutoRecharge,
			Is_Auto_Recharge				as isAutoRecharge,
			Open_Auto_Pay					as openAutoPay,
			Is_Auto_Pay						as isAutoPay,
			Open_Auto_Invest				as openAutoInvest,
			Is_Auto_Invest					as isAutoInvest,
			Open_Second_Distribute			as openSecondDistribute
		from Member_Third_Info mti 
		left join Member_Third_Auth_Info mtai on mti.Account_Id = mtai.Account_Id
		where mti.Member_ID = #{memberId} and mti.Member_Type = #{memberType}
	</select>
	
	
	
</mapper>
