<?xml version="1.0" encoding="UTF-8"?>    
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">     

<mapper namespace="SmsDao">     
	
	<!-- 查询结果封装 -->
	<resultMap type="cn.springmvc.dao.impl.sms.SmsSetInfoEntity" id="sendSmsUtil">
		<!-- <id column="Sms_Interface" property="lId" /> -->
		<result column="Sms_Interface" property="sInterface"/>
		<result column="Sms_SerialNumber" property="sSn"/>
		<result column="Sms_Password" property="sPwd"/>
	</resultMap>	
	
	<!-- 获取短信设置信息	发送短信 -->
	<select id="getSmsSetInfo" parameterType="Map" resultMap="sendSmsUtil">
		select Sms_Interface,Sms_SerialNumber,Sms_Password from Sms_Settings where Statu = 1 and Sms_Interface_Type=0 order by Opt_Date desc limit 0,1
	</select>
	
	<!-- 添加短信发送日志	-->
	<select id="insertSmsRecord"  statementType="CALLABLE" resultType="Map">
		<![CDATA[{call SendMsgRecordDeal(
				#{iType,			mode=IN,	jdbcType=TINYINT},
				#{sDetail,			mode=IN,	jdbcType=VARCHAR},
				#{sPhone,			mode=IN,	jdbcType=VARCHAR},
				#{iSendType,		mode=IN,	jdbcType=TINYINT},
				#{adminId,			mode=IN,	jdbcType=BIGINT},
				#{istatu,			mode=IN,	jdbcType=TINYINT},
				#{recordDate,		mode=IN,	jdbcType=VARCHAR},
				#{result,			mode=OUT,	jdbcType=INTEGER}
    		)}
    	]]>
	</select>
	<!-- 根据会员id，短信类型查询是否存在发送该短信内容 -->
	<select id="WhetherThereTextMessaging" parameterType="Map" resultType="String">
		SELECT mf.Msg_Detail FROM Member_SmsSend_Set mss
		LEFT JOIN Message_Format mf ON mf.Type_ID=mss.Type_ID 
		WHERE mss.Statu = 1 AND mss.Type_ID = #{typeId}
		<if test="memberID != -1">
			AND mss.Member_ID = #{memberID}
		</if>
	</select>
	
	<select id="getEmail" parameterType="Map" resultType="cn.springmvc.dao.impl.sms.EMessageEntity">
		select Smtpservice smtpservice,Port_Number port_Number,Email_Address email_Address,
			Email_Password email_Password from  Mail_Settings limit 1 
	</select>
	
	
	<insert id="insertEmailSmsRecord" parameterType="Map">
		insert into Email_Record
			(Member_Type,Member_ID,Msg_Detail,Short_Email,
				Record_Type,Admin_ID,Record_Date,Statu)
				values(#{memberType},#{memberID},#{sDetail},#{email},#{sSendType},#{lAdminId},now(),#{sStatu})
	</insert>
	
	
	<!-- 添加站内消息发送	-->
	<select id="LetterSendRecord"  statementType="CALLABLE" resultType="Map">
		<![CDATA[{call LetterSendRecord(
				#{vTmp,			mode=IN,	jdbcType=VARCHAR},
				#{adminId,			mode=IN,	jdbcType=BIGINT},
				#{sendType,			mode=IN,	jdbcType=BIGINT},
				#{details,		mode=IN,	jdbcType=VARCHAR},
				#{result,			mode=OUT,	jdbcType=INTEGER}
    		)}
    	]]>
	</select>
	<!-- 根据会员id查询用户名 -->
	<select id="findLogName" parameterType="Map" resultType="String">
		select Logname from Member_Info where Member_ID = #{memberID} limit 1
	</select>
	<!-- 根据借款申请id查询项目名称 -->
	<select id="findProjectNameById" parameterType="Map" resultType="String">
		select pbi.Project_Title from Project_App_Record par left join  Project_Base_Info pbi
			on par.Project_Base_ID = pbi.Project_Base_ID where par.Apply_Id = #{applyId} limit 1
	</select>
	<!-- 根据借款申请id查询项目类型名称 -->
	<select id="findProjectTypeNameById" parameterType="Map" resultType="String">
		select pbi.Project_Name from Project_App_Record par left join  ProjectBaseInfo pbi
			on par.Project_ID = pbi.Project_ID where par.Apply_Id = #{applyId} limit 1
	</select>
</mapper>
